#!/bin/sh
#
# zsh/bash startup

echo
echo "WD=$PWD"
echo "dollarZERO='$0'"

SHELLS="${@:-zsh bash}"
echo "shells='$SHELLS'"

# First check how is this script executed
#  - in case of a shell resource, this will be interactive session,
#    prepare basic environment variables and do the shell specific tasks
#  - in case of start as a command, open a shell (zsh or bash) and push this file
#    as a resource
case $0 in
*bash)	# as bash resource
	echo sourcing to BASH
	;;
*zsh)	# as zsh resource
	echo sourcing to ZSH
	unset ZDOTDIR
	;;
*zcle)	# executed by istself as a command
	# Now we're looking for suitable shell
	# zsh is first to try, bash is fallback
	echo executing as script, looking for shell

	# Find the full path to this resource file
	export RC=$(cd `dirname $0`;pwd;)/$(basename $0)

	for S in $SHELLS; do
		echo Trying shell: $S
		which $S >/dev/null 2>&1 || continue
		echo Found shell: $S

		# Select the shell specific way of sourcing this file
		case $S in
		bash)
			exec bash --rcfile $0
			;;
		zsh)
			export ZDOTDIR=/tmp
			ln -sf $RC $ZDOTDIR/.zshrc
			exec zsh
			;;
		*)
			echo IDK...
			exit 1;;
		esac
	done
	echo no such shell, go to he...
	exit 1
	;;
*)	echo something unknown;;
esac

_clexe () {
	[ -f "$1" ] || return 1
	[[ $CLE_EXE =~ :$1[:$] ]] && return
	CLE_EXE=$CLE_EXE:$1
	printb _clexe $1
	source $1
}
CLE_EXE=$RC

alias l='ls -l'
# color table
#: initialize $_C* variables with terminal compatible escape sequences
#: following are basic ones:
_CN=`tput sgr0`
_CL=`tput bold`
_CU=`tput smul`;_Cu=`tput rmul`
_CD=`tput dim`
_CV=`tput rev`

# boldprint
printb () { printf "$_CL$*$_CN\n";}

echo
printb --------------
printb Resource starts
echo $RC
RD=`dirname $RC`
echo $RD

## ** cd command additions **
## `.. ...`     - up one or two levels
## `-`  (dash)  - cd to recent dir
- () { cd -;}
.. () { cd ..;}
... () { cd ../..;}

# heh, my stuff here!
_clexe $HOME/.cle-local
_clexe ~/.cle-mich/al
