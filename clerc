#
## CLE :: Command Live Environment
## author: Michael Arbet (marbet@redhat.com)
## version: 3.1  13th July 2016
## license: GNU GPL 3
## https://gitlab.cee.redhat.com/marbet/cle
##
#
# bash tweaks
# - colorized prompt with exit code highlight
# - builtin aliases and function
# - history tweaks (timestamps etc)
# - shell options
# - builtin self documentation feature
# - command 'cle' to control the environment
#
# Execute this file within your shell session once and integrate
# to your profile seamlessly with 'cle deploy local' command
# 
#        $ . clerc
#        $ cle deploy user
#
# - use implemented 'ssg' (ssh workaround) and seamlessly pass
#   this environment to remote machine without installation
# - try 'suu' (sudo workaround) 
# - change settings with implememted 'cle' command

# TODO: double $PWD sometimes appear. remove it
CLE_RC=${BASH_SOURCE[0]}
case $CLE_RC in
/*)	;;
*)	CLE_RC=$PWD/$CLE_RC ;;
esac

# check is we're running manually from source
if [ `basename $CLE_RC` = 'clerc' ]; then
	echo
	echo "  *** Welcome to Command Live Environment - CLE ***"
	echo
	echo "If this is your first run, consider setting up in your profile."
	echo "Issue following command to copy source script into $HOME/.clerc"
	echo "and activate the environment in $HOME/.bashrc"
	echo
	echo "     [1m cle deploy user [0m"
	echo
	CLE_EXE=""
fi

# check if this is interactive session and if not, skip all the tweaks
# this is required for scp compattibility if used within .bashrc
# note: LOGNAME contains user name even in scp session,
#       whereas 'who am i' produces empty string - this is why CLE_LCUSER
#
CLE_LCLUSER=`who am i 2>/dev/null | cut -d' ' -f1`
if [ -n "$CLE_LCLUSER" -a -z "$CLE_EXE" ]; then 

# internal helper function: execute associated script and
# add the filename to CLE_EXE - useful as a debug log
CLE_EXE=$CLE_RC
function _clexe {
	[ -f $1 ] && CLE_EXE=$CLE_EXE:$1 && . $1
}

CLE_VERSION=`grep -m1 "# version:" $CLE_RC | cut -d' ' -f3-`
 
# tweaked hostname to remove some substrings (redhat and gss only)
CLE_HN=`hostname | sed -e 's/.redhat.com//' -e 's/.gsslab//'` 

# default prompt and where it will be stored
CLE_TIME='\A'
CLE_COLOR='marley'
if [ -z "$CLE_RMTUSER" ]; then
	CLE_PROMPT=$HOME/.cleprompt
else
	CLE_PROMPT=$HOME/.cleprompt-$CLE_RMTUSER
fi

# default CLE settings can ge overridden later
# assorted enviroment variables
export EDITOR=vi
export PAGER="less -s"
HISTCONTROL=ignorespace:ignoredups:erasedups
HISTTIMEFORMAT="%d%b %H:%M:%S  "
shopt -s checkwinsize

# local setup like e.g CLE_COLOR, CLE_PS, CLE_HN, CLE_TIME, anything...
_clexe $HOME/.clerc_local
_clexe $HOME/.cleprompt
_clexe $CLE_PROMPT

#
#	Colorized prompt with exit status
#
if [ -z "$CLE_PS" ]; then
	case "$CLE_COLOR" in 
	red)	 COLOR="\[\e[0;31m\]"; COLBOLD="\[\e[1;31m\]" ;;
	green)	 COLOR="\[\e[0;32m\]"; COLBOLD="\[\e[1;32m\]" ;;
	yellow)	 COLOR="\[\e[0;33m\]"; COLBOLD="\[\e[1;33m\]" ;;
	blue)	 COLOR="\[\e[0;34m\]"; COLBOLD="\[\e[1;34m\]" ;;
	magenta) COLOR="\[\e[0;35m\]"; COLBOLD="\[\e[1;35m\]" ;;
	cyan)	 COLOR="\[\e[0;36m\]"; COLBOLD="\[\e[1;36m\]" ;;
	white)	 COLOR="\[\e[0;37m\]"; COLBOLD="\[\e[1;37m\]" ;;
	bold)
		CLE_PS="\[\e[1m\]\u@$CLE_HN: \w \\$"
		PS2=" \[\e[1m\]>>> \\$\[\e[0m\] "
		;;
	grey|gray)
		CLE_PS="\[\e[1;30m\]\u@$CLE_HN \w \[\e[1;30m\]\\$"
		PS2=" \[\e[1;30m\]>>> \\$\[\e[0m\] "
		;;
	marley)
		# if you have no idea, have a smoke and imagine...
		# ... bobmarley style :-)
		CLE_PS="\[\e[1;31m\]\u \[\e[1;33m\]$CLE_HN \[\e[1;32m\]\w \\$"
		PS2=" \[\e[0;31m\]>>> \\$\[\e[0m\] "
		;;
		# setup your own style here
	*)
		# something unknow was set but we want to work even with this...
		CLE_PS="($CLE_COLOR)" ;;
	esac

	# compose propmpts if they're still not set
	if [ -z "$CLE_PS" ]; then
		CLE_PS="$COLBOLD\u@$CLE_HN $COLOR\w $COLBOLD\\$"
		PS2="$COLBOLD >>>\\$\[\e[0m\] "
	fi
fi

# prompt function - called upon each new prompt line
function _cleprompt {
	EE=$?  # store exit status code (it would disappear!)
	if [ $EE -eq 0 ]; then
		EEPS="\[\e[1m\][$EE]"
	else
		EEPS="\[\e[41m\]\a[$EE]\[\e[m\]"
	fi
	# Final prompt composition
	PS1="$EEPS \[\e[0;37m\]$CLE_TIME $CLE_PS\[\e[m\] "
	# change window title
	echo -en "\e]0;$CLE_RMTUSER -> $LOGNAME@$CLE_HN: $PWD\007"
}
PROMPT_COMMAND=_cleprompt


#  
#  ALIASES 
#

# basic aliases - those might be overridden by .aliases file
#
## CLE internal aliases and functions:
## -----------------------------------
## ls commands aliases: l ll la lt llr l.
alias ls='ls --color=auto'
alias ll='ls -l'
alias l='ls -l'
alias lt='ls -ltr'
alias la='ls -al'
alias llr='ls -lR'
alias l.='ls -ld .?*'
## cd command aliases:  .. ... (up one or two levels); c- (cd to the recent dir)
alias ..='cd ..'
alias ...='cd ../..'
alias c-='cd -'
## xx & cx       -- directory bookmark; set it and 'cd' there
# what about to define x1/c1, x2/c2, etc...
alias xx='XPOINT=`pwd`; echo Directory boorkmark set here: $XPOINT'
alias cx='cd $XPOINT'
alias grep='grep --color=auto'
alias mv='mv -i'
alias rm='rm -i'

# personalized aliases
if [ -n "$CLE_RMTUSER" ]; then
	CLE_ALIASES=$HOME/.aliases-$CLE_RMTUSER
	HISTFILE=$HOME/.bash_history_$CLE_RMTUSER  # private history files
else
	CLE_ALIASES=$HOME/.aliases
fi
_clexe $HOME/.aliases
_clexe $CLE_ALIASES

# default aliases - those are here not to be overridden by  .aliases file
alias al=alias
## alisa         -- save your set of aliases into local file
alias alisa='alias; echo "ENTER for save, Ctrl-C"; read ; alias >$CLE_ALIASES; echo Saved to file .$CLE_ALIASES'
## alilo         -- load aliases from file
alias alilo=". $CLE_ALIASES"
## alied         -- edit stored aliases
alias alied='vi $CLE_ALIASES; echo; echo "ENTER to reload, Ctrl-C to break"; read; . $CLE_ALIASES'
alias hh=history

# store basic alias set if there is none
[ -f $CLE_ALIASES ] || alias >$CLE_ALIASES

#
# functions
#

## path          -- show $PATH in readable way
function path {
	echo $PATH|tr : \\n
}

## psg           -- ps filtered through grep
function psg {
 ps -ef |grep -i $1|grep -v grep
}

##
## SSH & SUDO wrappers:
## --------------------
## ssg [user@]hostname  -- login to remote system running this environment
# You can replace 'ssg' with 'ssh' although this is not recommended
function ssg {
	CLE_64=$(base64 -w 0 $CLE_RC)
	if [ -n "$1" ]; then
		`which ssh` -t $1 "echo $CLE_64|base64 -d >.clerc-tmp-$LOGNAME; export CLE_RMTUSER=$LOGNAME; exec bash --rcfile .clerc-tmp-$LOGNAME"
	else
		cle help ssg
	fi
	unset CLE_64
}

## suu [username]       -- sudo wrapper; root is the default account
function suu {
	CLE_64=$(base64 -w 0 $CLE_RC)
	sudo -i -u ${1:-root} /bin/bash  -c 'echo '$CLE_64'|base64 -d >$HOME/.clerc-tmp-'$LOGNAME'; export CLE_RMTUSER='$LOGNAME'; exec bash --rcfile $HOME/.clerc-tmp-'$LOGNAME
	unset CLE_64
}

# internal helper function - save prompt variables
function _clepromptsave {
	echo CLE_COLOR=\'$CLE_COLOR\' >$CLE_PROMPT
	echo CLE_TIME=\'$CLE_TIME\' >>$CLE_PROMPT
}

##
## CLE command & control:
## ----------------------
function cle {
	case "$1_$2" in
	color_*)
		## cle color blue|green|red|marley|..etc  -- set prompt color
		unset CLE_PS
		CLE_COLOR="$2"
		_clepromptsave
		cle reload
		;;
	time_on)
		## cle time on|off     -- turn server time in prompt on/off
		unset CLE_PS
		CLE_TIME='\A'
		_clepromptsave
		cle reload
		;;
	time_off)
		unset CLE_PS
		CLE_TIME=''
		_clepromptsave
		cle reload
		;;
	time_*)
		## cle time STRING     -- set custom strings
		unset CLE_PS
		shift
		CLE_TIME="$*"
		_clepromptsave
		cle reload
		;;
	deploy_user)
		## cle deploy user     -- hook CLE into user's profile
		cp $CLE_RC $HOME/.clerc
		grep '# Command Live Environment' $HOME/.bashrc >&/dev/null
		if [ $? != 0 ]; then
			echo "Pres enter to add CLE into .bashrc or Ctrl-C to quit"
			read
			echo >>$HOME/.bashrc
			echo >>$HOME/.bashrc '# Command Live Environment'
			echo >>$HOME/.bashrc '[ -f $HOME/.clerc ] && . $HOME/.clerc'
			echo >>$HOME/.bashrc
			echo '... added following to the end of .bashrc'
			tail -3 $HOME/.bashrc
		else
			echo CLE is already hooked into .bashrc :
			tail -3 $HOME/.bashrc
		fi
		;;
	deploy_system)
		## cle deploy system   -- hook CLE into /etc/profile.d
		echo; echo " CLE is to be integrated into your system!"
		echo " Content of $CLE_RC will be copied to /etc/profile.d/cle.sh"
		echo " The environment will be activated for all users."
		echo " Only root can do that..."
		echo " Are you sure? (y/N)"
		read
		if [ "$REPLY" = 'y' ]; then
			cp $CLE_RC /etc/profile.d/cle.sh
			echo " Done!"
		else
			echo "No change."
		fi
		;;
	edit_)
		## cle edit            -- edit resource file
		echo "CLE edit .... to be implemented later"
		;;
	reload_)
		## cle reload          -- reload CLE
		unset CLE_PS
		unset CLE_EXE
		. $CLE_RC
		;;
	clean_)
		## cle clean           -- remove aliases, and local settings
		echo "Cleaning CLE settings, are you sure? (y/N)"
		read; if [ "$REPLY" == 'y' ]; then
			unalias -a
			rm -f $CLE_ALIASES $CLE_PROMPT ~/.clerc_local
			cle reload
		fi
		;;
	env_)
		## cle env             -- show CLE related variables
		( set -o posix; set|grep CLE_)
		;;
	ls_)
		## cle ls              -- ls -l $HOME/.cle*
		ls -l $HOME/.aliases* $HOME/.cle*
		;;
	help_*)
		## cle help [cmd]      -- self documenting feature
		# double-hash denotes help content :-)
		_clebanner
		awk -F# "/## *$2/"' { print $3 }' $CLE_RC
		;;
	*)
		echo what? "cle $1 $2??"
		echo check: cle help
		;;
	esac
}

# print banner
function _clebanner {
cat <<EOT

   ___|  |      ____|    Command Live Environment activated
  |      |      __|      ...bit of life to the command line
  |      |      |           'cle help' to learn more 
 \____| _____| _____|    or 'less $CLE_RC' to learn the magic
                      
EOT
}

# enhance path with user's own bin directory
[ -d $HOME/bin ] && echo $PATH | grep -v $HOME/bin >&/dev/null && PATH=$PATH:$HOME/bin

# remove disturbing stuff
unset SUDO_COMMAND

# indicate first run, show banner
[ -f $CLE_PROMPT ] || _clebanner && _clepromptsave

fi # End of login shell setup

# that's all the magic :-)

