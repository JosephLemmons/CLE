#
# CLE :: Command Live Environment
# author: Michael Arbet (marbet@redhat.com)
# version: 3.1 June 2016
#
# bash tweaks
# - colorized prompt with exit code highlight
# - aliases and functions
# - history tweaks (timestamps etc)
# - shell options
#
# can be executed from .bashrc upon each regular login
# or using script ssg (ssh workaround) seamlessly passed to the user environment

# TODO: double $PWD
CLE_RC=${BASH_SOURCE[0]}
case $CLE_RC in
/*)	;;
*)	CLE_RC=$PWD/$CLE_RC ;;
esac

CLE_VERSION='3.1 - June 2016'
 
# check is we're running manually from source
if [ `basename $CLE_RC` = 'clerc' ]; then
	echo
	echo "  *** Welcome to Command Live Environment - CLE ***"
	echo
	echo "If this is your first run, consider setting up in your profile."
	echo "Issue following command to copy source script into $HOME/.clerc"
	echo "and activate the environment in $HOME/.bashrc"
	echo
	echo "     [1m cle deploy local [0m"
	echo
	CLE_DONE=""
fi

# check if this is interactive session and if not, skip all the tweaks
# this is required for scp compattibility if used within .bashrc
# note: LOGNAME contains user name even in scp session,
#       whereas 'who am i' produces empty string - this is why CLE_LCUSER
#
CLE_LCLUSER=`who am i 2>/dev/null | cut -d' ' -f1`
if [ -n "$CLE_LCLUSER" -a -z "$CLE_DONE" ]; then 

# tweaked hostname to remove some substrings (redhat and gss only)
CLE_HN=`hostname | sed -e 's/.redhat.com//' -e 's/.gsslab//'` 

# server time in prompt by default
CLE_TIME='\A'

# like e.g CLE_COLOR, CLE_PS, CLE_HN, CLE_TIME, anything...
[ -f $HOME/.clerc_local ] && . $HOME/.clerc_local

#
#	Colorized prompt with exit status
#
if [ -z "$CLE_PS" ]; then
	case "${CLE_COLOR:=marley}" in ### 'marley' is the default stuff :-)
	red)	 COLOR="\[\e[0;31m\]"; COLBOLD="\[\e[1;31m\]" ;;
	green)	 COLOR="\[\e[0;32m\]"; COLBOLD="\[\e[1;32m\]" ;;
	yellow)	 COLOR="\[\e[0;33m\]"; COLBOLD="\[\e[1;33m\]" ;;
	blue)	 COLOR="\[\e[0;34m\]"; COLBOLD="\[\e[1;34m\]" ;;
	magenta) COLOR="\[\e[0;35m\]"; COLBOLD="\[\e[1;35m\]" ;;
	cyan)	 COLOR="\[\e[0;36m\]"; COLBOLD="\[\e[1;36m\]" ;;
	white)	 COLOR="\[\e[0;37m\]"; COLBOLD="\[\e[1;37m\]" ;;
	bold)
		CLE_PS="\[\e[1m\]\A \u@$CLE_HN: \w \\$"
		PS2=" \[\e[1m\]...\\$\[\e[0m\] "
		;;
	grey|gray)
		CLE_PS="\[\e[1;30m\]\A \u@$CLE_HN: \w \[\e[1;30m\]\\$"
		PS2=" \[\e[1;30m\]...\\$\[\e[0m\] "
		;;
	marley)
		# if you have no idea, have a smoke and imagine...
		# ... bobmarley style :-)
		CLE_PS="\[\e[1;32m\]\A \[\e[1;31m\]\u \[\e[1;33m\]$CLE_HN \[\e[0;32m\]\w \\$"
		PS2=" \[\e[1;31m\]...\\$\[\e[0m\] "
		;;
		# setup your own style here
	*)
		# something unknow was set but we want to work even with this...
		CLE_PS="($CLE_COLOR)" ;;
	esac

	# compose propmpts if they're still not set
	if [ -z "$CLE_PS" ]; then
		CLE_PS="$COLBOLD$CLE_TIME \u $CLE_HN $COLOR\w $COLBOLD\\$"
		PS2="$COLBOLD ...\\$\[\e[0m\] "
	fi
fi

# prompt function - called upon each new prompt line
function statusprompt {
	EE=$?  # store exit status code (it would disappear!)
	if [ $EE -eq 0 ]; then
		EEPS="\[\e[1m\][$EE]"
	else
		EEPS="\[\e[41m\]\a[$EE]\[\e[m\]"
	fi
	# Final prompt composition
	PS1="$EEPS $CLE_PS\[\e[m\] "
	# change window title
	echo -en "\e]0;$CLE_RMTUSER -> $LOGNAME@$CLE_HN: $PWD\007"
}
PROMPT_COMMAND=statusprompt


#  
#  ALIASES 
#

# basic aliases - those might be overridden by .aliases file
##
## CLE internal aliases and functions:
## ls commands aliases: l ll la lt llr lld
alias ls='ls --color=auto'
alias ll='ls -l'
alias l='ls -l'
alias lt='ls -lt'
alias la='ls -al'
alias llr='ls -lR'
alias lld='ls -ld *'
## cd command aliases: cd.. cd... cd-
alias cd..='cd ..'
alias cd...='cd ../..'
alias cd-='cd -'
## xx & cx   -- directory bookmark
alias xx='XPOINT=`pwd`; echo Directory boorkmark set here: $XPOINT'
alias cx='cd $XPOINT'
alias grep='grep --color=auto'
alias mv='mv -i'
alias rm='rm -i'
## suba   -- sudo bash
alias suba='sudo bash'

# load user defined aliases #1
[ -f $HOME/.aliases ] && . $HOME/.aliases

# personalized aliases
if [ -n "$CLE_RMTUSER" ]; then
	CLE_ALIASES=$HOME/.aliases-$CLE_RMTUSER
	HISTFILE=$HOME/.bash_history_$CLE_RMTUSER  # private history files
else
	CLE_ALIASES=$HOME/.aliases
fi

# load personalized aliases
[ -f $CLE_ALIASES ] && . $CLE_ALIASES

# default aliases - those are here not to be overridden by  .aliases file
alias al=alias
## alisa   -- save your set of aliases into local file
alias alisa='alias; echo "ENTER for save, Ctrl-C"; read ; alias >$CLE_ALIASES; echo Saved to file .$CLE_ALIASES'
## alilo   -- load aliases from file
alias alilo=". $CLE_ALIASES"
## alied   -- edit stored aliases
alias alied='vi $CLE_ALIASES; echo; echo "ENTER to reload, Ctrl-C to break"; read; . $CLE_ALIASES'
alias hh=history
## path    -- show content of $PATH in more readable way
alias path='echo $PATH|tr : \\n'

# store basic alias set
[ -f $CLE_ALIASES ] || alias >$CLE_ALIASES

#
# functions
#

## psg   -- ps filtered through grep
function psg {
 ps -ef |grep -i $1|grep -v grep
}

# You can replace 'ssg' with 'ssh' although this is not recommended
## ssg [user@]hostname   -- login to remote system using this environment
function ssg {
	# store the whole file into one string
	CLE_64=$(base64 -w 0 $CLE_RC)
	# ...it will be decoded on the other side
	`which ssh` -t $1 "echo $CLE_64|base64 -d >.clerc-$LOGNAME; export CLE_RMTUSER=$LOGNAME; exec bash --rcfile .clerc-$LOGNAME"
	unset CLE_64
}

##
## CLE command & control:
function cle {
	case "$1_$2" in
	show_)
		## cle show   -- show CLE related variables
		( set -o posix; set |grep CLE_)
		echo PID=$$
		;;
	color_*)
		## cle color blue|green|red|marley|..etc  -- set prompt color
		unset CLE_PS
		CLE_COLOR="$2"
		cle reload
		;;
	deploy_local)
		## cle deploy local   -- hook CLE into user's profile
		cp $CLE_RC $HOME/.clerc
		grep '# Command Live Environment' $HOME/.bashrc >&/dev/null
		if [ $? != 0 ]; then
			echo "Pres enter to add CLE into .bashrc or Ctrl-C to quit"
			read
			echo >>$HOME/.bashrc
			echo >>$HOME/.bashrc '# Command Live Environment'
			echo >>$HOME/.bashrc '[ -f $HOME/.clerc ] && . $HOME/.clerc'
			echo >>$HOME/.bashrc
			echo '... added following to the end of .bashrc'
			tail -3 $HOME/.bashrc
		else
			echo CLE is already hooked into .bashrc :
			tail -3 $HOME/.bashrc
		fi
		;;
	deploy_system)
		## cle deploy system  -- hook CLE into /etc/profile.d
		echo "cle deploy system ... to be done"
		;;
	edit_)
		## cle edit     -- edit resource file
		echo CLE edit .... to be implemented later
		;;
	save_)
		## cle save     -- store setiings into .clerc_local
		echo Press ENTER to owerwrite .clerc_local or Ctrl-C to quit
		read
		echo CLE_COLOR=$CLE_COLOR >$HOME/.clerc_local
		;;
	reload_)
		## cle reload   -- reload CLE
		unset CLE_DONE
		. $CLE_RC
		;;
	help_)
		## cle help   -- self documenting feature
		echo CLE help:
		echo ---------
		awk 'BEGIN { FS="#" } /##/ { print $3 }' $CLE_RC
		;;
	*)
		echo what? "cle $1 $2 ??"
		cle help
		;;
	esac
}

# assorted enviroment variables
export EDITOR=vi
export PAGER="less -s"
HISTCONTROL=ignorespace:ignoredups:erasedups
HISTTIMEFORMAT="%d%b %H:%M:%S  "

# for better cmdline beahavior - checking widow size 
shopt -s checkwinsize


# path extensions - conditional to prevent the same item is there several times
[ -d $HOME/bin ] && echo $PATH|grep -v $HOME/bin >/dev/null && PATH=$PATH:$HOME/bin

CLE_DONE=ok
fi # End of login shell setup

# that's all the magic :-)

