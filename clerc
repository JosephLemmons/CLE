#
## CLE :: Command Live Environment
## author: Michael Arbet (marbet@redhat.com)
## version: 3 2016-09-30
## license: GNU GPL 3
## https://gitlab.cee.redhat.com/marbet/cle
##
# bash tweaks
# - colorized prompt incl exit code highlight
# - builtin aliases and functions
# - history tweaks (timestamps etc), shell options
#
# Execute this file within your shell session once and integrate
# to your profile seamlessly with 'cle deploy local' command
# 
#	$ . clerc
#	$ cle deploy user
#
# * use implemented 'ssg' (ssh workaround) and seamlessly pass
#   this environment to remote machine without installation
# * try 'suu' (sudo workaround) with similar effect
# * change settings with implememted 'cle' command
# * builtin self documentation feature ('cle help' & 'cle readme')
# * manage your aliases using 'aa' function

# check if this is interactive session and if not, skip all the tweaks
# this is required for scp compattibility and uninteractive ssh sessions
if [ -n "TERM" -a "$TERM" != "dumb" -a -z "$CLE_EXE" ]; then
CLE_LCLUSER=`whoami`

CLE_RC=${BASH_SOURCE[0]}
case $CLE_RC in
/*)	;;
*)	CLE_RC=$PWD/$CLE_RC ;;
esac
CLE_EXE=$CLE_RC
CLE_VERSION=`grep -m1 "# version:" $CLE_RC | cut -d' ' -f3-`

# determine effective user and custom script
# CLE_EFUSER is passed to all consecutive sessions initiated with ssg/suu
CLE_CUSTOMRC=$HOME/.cle-${CLE_EFUSER:=$CLE_LCLUSER}

# where in the deep space is CLE growing...
CLE_ORIGIN=https://raw.githubusercontent.com/micharbet/CLE/master
 
# hostname - cna be tweaked in e.g. ~/.clerd-local
CLE_HN=`hostname`

# default prompt settings
CLE_TIME='\A'
CLE_COLOR='marley'
CLE_WTITLE=1
CLE_PROMPT=$HOME/.cleprompt-$CLE_EFUSER

# color table initializattion
CT_N=`tput sgr0` # reset
CT_L=`tput bold`
CT=`tput setaf 0`; CT_k=$CT_N$CT; CT_K=$CT_L$CT
CT=`tput setaf 1`; CT_r=$CT_N$CT; CT_R=$CT_L$CT
CT=`tput setaf 2`; CT_g=$CT_N$CT; CT_G=$CT_L$CT
CT=`tput setaf 3`; CT_y=$CT_N$CT; CT_Y=$CT_L$CT
CT=`tput setaf 4`; CT_b=$CT_N$CT; CT_B=$CT_L$CT
CT=`tput setaf 5`; CT_m=$CT_N$CT; CT_M=$CT_L$CT
CT=`tput setaf 6`; CT_c=$CT_N$CT; CT_C=$CT_L$CT
CT=`tput setaf 7`; CT_w=$CT_N$CT; CT_W=$CT_L$CT
CT_E=`tput setab 1; tput setaf 7` # err highlight

# default shell settings
export EDITOR=vi
export PAGER="less -s"
HISTFILE=$HOME/.bash_history-$CLE_EFUSER
HISTCONTROL=ignorespace:ignoredups:erasedups
HISTTIMEFORMAT="%d%b %H:%M:%S  "
PROMPT_DIRTRIM=2
shopt -s checkwinsize

#
# Internal helper functions
#

echob () {
	echo -e $CT_L$*$CT_N
}

ask () {
	read -p "$CT_L$*$CT_N"
}

# print banner
_clebanner () {
cat <<EOT

   ___|  |      ____|    Command Live Environment activated
  |      |      __|      ...bit of life to the command line
  |      |      |          $CT_L cle help $CT_N      to learn more 
 \____| _____| _____|    or$CT_L less $CLE_RC $CT_N  to discover the magic
 
EOT
}

# execute associated script and log its filename into CLE_EXE to keep track
# also ensure the script will be executed only once
_clexe () {
	echo $CLE_EXE|grep -q $1 && return
	[ -f $1 ] && CLE_EXE=$CLE_EXE:$1 && . $1
}

# save prompt related variables
_clepromptsave () {
	echo CLE_COLOR=\'$CLE_COLOR\'
	echo CLE_TIME=\'$CLE_TIME\'
} >$CLE_PROMPT


# colorizer
_clesetpr () {
	local C0 C1 C2 I II PP
	case "$1" in 
	red)	 C0=$CT_r; C2=$CT_R;;
	green)	 C0=$CT_g; C2=$CT_G;;
	yellow)	 C0=$CT_y; C2=$CT_Y;;
	blue)	 C0=$CT_b; C2=$CT_B;;
	magenta) C0=$CT_m; C2=$CT_M;;
	cyan)	 C0=$CT_c; C2=$CT_C;;
	bold)    C0=$CT_L;;
	white|grey|gray) C0=$CT_N; C1=$CT_w; C2=$CT_W;;
	tricolora) C0=$CT_R; C1=$CT_B; C2=$CT_W;;
	marley) # ... Bob Marley style :-) have a smoke and imagine...
		C0=$CT_R; C1=$CT_Y; C2=$CT_G;;
	???)	# ... any 3 colors
		for I in 0 1 2; do
			II=CT_${1:$I:1}
			declare C$I=${!II}
		done;;
	*)	# print help
		echo " unknown color $1, select one of predefined:"
		declare -f _clesetpr|sed -n 's/\(\<[a-zA-Z]*\)).*/\1/p'
		echo " or create your own 3-letter style using this:"
		echo "  rgbcmykw and RGBCMYKW (e.g 'cle color GyY')"
		return 2
	esac
	# compose prompts
	[ $UID == 0 ] && PP="#" || PP=">"
	CLE_PS="\[$C0\]\u \[$C1\]$CLE_HN \[$C2\]\w $PP"
	PS2="\[$C0\] >>>\[$CT_N\] "
	CLE_COLOR=$1
	_clepromptsave
}

# prompt function - called upon each new prompt line
_cleprompt () {
	local EEP EE=$?  # store exit status code (it would disappear!)
	if [ $EE -eq 0 ]; then
		EEP="\[$CT_K\][$EE]"
	else
		EEP="\[$CT_E\][$EE]\[$CT_N$CT_K\]"
	fi
	# Final prompt composition
	PS1="$EEP${CLE_TIME:+ $CLE_TIME} \[$CT_N\]$CLE_PS\[$CT_N\] "
	# change window title TERMPORARY DISABLED
	[ -z "$CLE_WTITLE" ] && return
	[ "$CLE_EFUSER" != "$LOGNAME" ] && WTU="$CLE_EFUSER ->"
	echo -en "\033]0;$WTU $LOGNAME@$CLE_HN: $PWD\007"
}
PROMPT_COMMAND=_cleprompt
_clexe $CLE_PROMPT
_clesetpr $CLE_COLOR

case $CLE_RC in
*.clerc-tmp-*)	# run old good .bashrc :-)
	_clexe $HOME/.bashrc
	;;
*/clerc*)	# this looks like initial run from commandline
	_clebanner
	echo "If this is your first run, consider setting up in your profile."
	echo "Issue following command to copy source script into $HOME/.clerc"
	echo -e "and activate the environment in $HOME/.bashrc\n"
	echob "     cle deploy user\n"
	;;
esac

# local tweaks
_clexe $HOME/.clerc-local

# execute plugins from .cle folder
for PLUG in $HOME/.cle/*; do
	_clexe $PLUG
done

# basic aliases
#
## CLE internal aliases and functions:
## -----------------------------------
## ls commands aliases: ll la lt llr l.
alias ls='ls --color=auto'
alias ll='ls -l'
alias lt='ls -ltr'
alias la='ls -al'
alias llr='ls -lR'
alias l.='ls -ld .?*'
## cd command aliases:  .. ... (up one or two levels); c- (cd to the recent dir)
alias ..='cd ..'
alias ...='cd ../..'
alias c-='cd -'
## xx & cx       -- directory bookmark; set it and 'cd' there
# what about to define x1/c1, x2/c2, etc...
alias xx='XPOINT=`pwd`; echo Directory boorkmark set here: $XPOINT'
alias cx='cd $XPOINT'
alias grep='grep --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias hh=history

##
## alias management
## ----------------
CLE_ALIASES=$HOME/.aliases-$CLE_EFUSER # personalized aliases
[ -f $CLE_ALIASES ] || alias >$CLE_ALIASES # create basic alias set
_clexe $CLE_ALIASES

aa () {
	case "$1" in
	"") ## aa         -- show aliases
		alias ;;
	save) ## aa save    -- save your set of aliases
		alias
		ask "ENTER for save, Ctrl-C to exit"
		alias >$CLE_ALIASES
		echo Saved to file .$CLE_ALIASES
		;;
	load) ## aa load    -- (re)load your set of aliases
		unalias -a
		. $CLE_ALIASES
		;;
	edit) ## aa edit    -- edit and reload your aliases
		local TALIAS=$CLE_ALIASES-backup
		alias >$TALIAS
		vi $TALIAS
		cp $TALIAS $CLE_ALIASES
		aa load
		;;
	merge) ## aa merge   -- merge local and remote aliases
		echo aa merge ... not imlemented yet ;;
	*)	
		echo " unimplemented: aa $1 $2"
		cle help aa
                ;;
	esac
}

## path          -- show $PATH in readable way
path () {
	echo $PATH|tr : \\n
}

## psg           -- ps filtered through grep
psg () {
 ps -ef |grep -i $1|grep -v grep
}

##
## SSH & SUDO wrappers:
## --------------------
## ssg [user@]hostname  -- login to remote system running this environment
ssg () {
	cd
	if [ -n "$1" ]; then
		cp $CLE_RC .clerc-tmp-$LOGNAME 2>/dev/null
		CLE_64=`tar czf - .clerc-tmp-$LOGNAME $CLE_MYFILES|base64|tr -d '\n\r '`
		`/usr/bin/which ssh` -t $1 "
			echo $CLE_64|base64 --decode |tar xzf -
			export CLE_EFUSER=$CLE_EFUSER;
			exec bash --rcfile .clerc-tmp-$LOGNAME"
	else
		cle help ssg
	fi
	unset CLE_64
	cd - >/dev/null
}

## suu [username]       -- sudo wrapper; root is the default account
suu () {
	cd
	cp $CLE_RC .clerc-tmp-$LOGNAME 2>/dev/null
	CLE_64=`tar czf - .clerc-tmp-$LOGNAME $CLE_MYFILES|base64|tr -d '\n\r '`
	sudo -i -u ${1:-root} /bin/bash  -c \
		"echo $CLE_64|base64 --decode| tar xzf -;
		 export CLE_EFUSER=$CLE_EFUSER;
		 exec bash --rcfile .clerc-tmp-$LOGNAME"
	unset CLE_64
	cd - >/dev/null
}

##
## CLE command & control:
## ----------------------
cle () {
	case "$1_$2" in
	color_*) ## cle color blue|green|red|marley|..etc  -- set prompt color
		_clesetpr $2 ;;
	time_on) ## cle time on|off     -- turn server time in prompt on/off
		CLE_TIME='\A'
		_clepromptsave ;;
	time_off)
		CLE_TIME=''
		_clepromptsave ;;
	time_*) ## cle time STRING     -- set custom strings
		shift
		CLE_TIME="$*"
		_clepromptsave ;;
	title_on) ## cle title on|off    -- turn on/off window title
		CLE_WTITLE="1" ;;
	title_off)
		CLE_WTITLE="" ;;
	deploy_user)
		## cle deploy user     -- hook CLE into user's profile
		local CLID='# Command Live Environment'
		local BRC=$HOME/.bashrc
		cp $CLE_RC $HOME/.clerc
		grep -q "$CLID" $BRC 
		if [ $? != 0 ]; then
			echo " CLE is to be integrated to your login script."
			ask " Are you sure? (y/N) "
			[ "$REPLY" != 'y' ] && return
			echo -e >>$BRC \\n$CLID
			echo -e >>$BRC '[ -f $HOME/.clerc ] && . $HOME/.clerc\n'
			echo -e '\n ... added following to the end of .bashrc :'
			tail -4 $BRC
		else
			echo " CLE is already hooked into .bashrc :"
			grep -A2 "$CLID" $BRC
		fi ;;
	deploy_system)
		## cle deploy system   -- hook CLE into /etc/profile.d
		echo " CLE is to be integrated into your system!"
		echo " Content of $CLE_RC will be copied to /etc/profile.d/cle.sh"
		echo " The environment will be activated for all users."
		echo " Only root can do that..."
		ask " Are you sure? (y/N) "
		[ "$REPLY" != 'y' ] && return
		cp $CLE_RC /etc/profile.d/cle.sh
		echo " Done!"
		;;
	reload_) ## cle reload          -- reload CLE
		unset CLE_EXE
		. $CLE_RC ;;
	env_)	## cle env             -- print CLE_* variables
		set | grep ^CLE_.*= ;;
	update_) ## cle update          -- download newest version of CLE
		curl -k $CLE_ORIGIN/clerc >$HOME/clerc-new
		echo "New CLE has been stored here: $HOME/clerc-new"
		ask "Press Enter to show diff or Ctrl-C to break"
		diff $CLE_RC $HOME/clerc-new
		ask "Do you want to install new version? (y/N) "
		[ "$REPLY" != 'y' ] && return
		cp $CLE_RC $HOME/clerc-orig
		mv $HOME/clerc-new $CLE_RC
		cle reload
		echo "New CLE has been installed, the previous version has been stored here: $HOME/clerc-orig"
		;;
	readme_) ## cle readme          -- download and show README file
		curl -k $CLE_ORIGIN/README.md |less ;;
	help_*) ## cle help [cmd]      -- self documenting feature
		# double-hash denotes help content :-)
		[ -z "$2" ] && _clebanner
		awk -F# "/## *$2/"' { print $3 }' $CLE_RC
		;;
	*)
		_cle_$1 $2
		if [ $? -eq 127 ]; then 
			echo " 'cle $1' not implemeted"
			echo " check this: cle help"
		fi ;;
	esac
}

# enhance path with user's own bin directory
[ -d $HOME/bin ] && echo $PATH | grep -vq $HOME/bin && PATH=$PATH:$HOME/bin

# remove disturbing stuff
unset SUDO_COMMAND

# run personal tweaks
_clexe $CLE_CUSTOMRC

# indicate first run, show banner
[ -f $CLE_PROMPT ] || _clebanner && _clepromptsave

fi # End of login shell setup
# and that's all the magic :-)

