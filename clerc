#!/bin/bash
#
# CLE : Command Live Environment
#
#* authors: Michael Arbet (marbet@redhat.com)
#*          Jakub Arbet (arbetjakub@gmail.com)
#* home:    https://github.com/micharbet/CLE
#* version: 2018-02-17 (Nova)
#* license: GNU GPL v2
#* Copyright (C) 2016-2018 by Michael Arbet 
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# CLE provides:
# -colorful prompt with hihglighted exit code
# -builtin aliases and functions
# -history improved
#
# 1. execute this file within your shell session
# 2. integrate into your profile:
#	$ . clerc
#	$ cle deploy
#
# -use 'ssg' (ssh wrapper) to access remote system, CLE is seamlessly
#  started without installation
# -try suu/sudd (su/sudo wrappers) with same effect
# -work in gnu screen using 'scrn'
# -alter settings with 'cle' command
# -store and manage your aliases with 'aa' function
# -use 'h' as a shortcut to classic history
# -check out rich history feature with 'hh'
# -built-in documentation: 'cle help'
# -update from GIT source

# check running in interactive session otherwise skip all
# required for scp compattibility
if [ -t 0 -a -z "$CLE_EXE" ];then

# warning: magic inside!

#debug stuff
DEBUG=y
prd () { [ $DEBUG ] && printf "%10s = %s\n" $1 ${!1}; }

# a little bit complicated way to find absolute path
export CLE_RC=${BASH_SOURCE[0]}
CLE_RD=$(cd `dirname $CLE_RC`;pwd;)
CLE_RC=$CLE_RD/`basename $CLE_RC`

[ $DEBUG ] && echo starting: $0
[ $DEBUG ] && echo startup cmdline $#: $*
prd CLE_RC

# ensure bash session will be started with this rcfile
[[ "$0" =~ /bin/bash ]] || exec `command which bash` --rcfile $CLE_RC

# who I'm
_N=`sed -n 's/.*cle-\(.*\)\/.*/\1/p' <<<$CLE_RC`
export CLE_USER=${CLE_USER:-${_N:-$USER}}
prd _N
prd CLE_USER

# find writable folder
_D=$HOME
[ -w $_D ] || _D=/tmp/$USER
CLE_D=$_D/.cle-$CLE_USER
mkdir -p $CLE_D
CLE_CF=$CLE_D/cf


# Transition hacks, remove this section later
[ -f $_D/.clecf-$CLE_USER ] && mv -f $_D/.clecf-$CLE_USER $CLE_D/cf && echo CLE transition: moved config file
[ -f $_D/.aliases-$CLE_USER ] && mv -f $_D/.aliases-$CLE_USER $CLE_D/aliases && echo CLE transition: moved aliases
[ -f $_D/.cleusr-$CLE_USER ] && mv -f $_D/.cleusr-$CLE_USER $_D/cleusr-$CLE_USER-old && echo CLE transition: found .cleusr-$CLE_USER, saved, remove it yourself probably
[ -f $_D/.screenrc-$CLE_USER ] && rm -f $_D/.screenrc-$CLE_USER && echo CLE transition: deleted .screenrc
[ -f $_D/.clerc-remote-$CLE_USER ] && rm -f $_D/.clerc-remote-$CLE_USER && echo CLE transition: deleted .clerc-remote-$CLE_USER
[ -d $_D/.cle ] && mv -f $_D/.cle $_D/cle-old && echo CLE transition: found .cle, saved, remove it yourself probably

# where in the deep space is CLE growing
CLE_SRC=https://raw.githubusercontent.com/micharbet/CLE/Nova
CLE_VER=`sed -n 's/^#\* version: //p' $CLE_RC`

# execute script and log its filename into CLE_EXE
# also ensure the script will be executed only once
_clexe () {
	[ $DEBUG ] && echo "clexe [$_EEE]:" $*
	[ -f "$1" ] || return 1
	[[ $CLE_EXE =~ :$1 ]] && return
	CLE_EXE=$CLE_EXE:$1
	. $1
}
CLE_EXE=$CLE_RC

_clexe /etc/profile
_clexe $HOME/.bashrc

# short hostname: remove domain, leave subdomains
CLE_SHN=`hostname|sed 's;\.[^.]*\.[^.]*$;;'`
CLE_IP=`cut -d' ' -f3 <<<$SSH_CONNECTION`

# color table
_CN=`tput sgr0`
_CL=`tput bold`
_CU=`tput smul`;_Cu=`tput rmul`
_CD=`tput dim`
_CV=`tput rev`
_I=0; for _N in k r g y b m c w; do
        _C=`tput setaf $_I`
        declare _C$_N=$_CN$_C
        declare _C$(tr a-z A-Z <<<$_N)=$_CL$_C #bold
        ((_I+=1))
done
_Ce=`tput setab 1;tput setaf 7` # err highlight


#
# Internal helper functions
#

# boldprint
printb () { printf "$_CL$*$_CN\n";}

# simple question
ask () {
	read -p "$_CL$* (y/N) $_CN" -n 1 -s
	echo ${REPLY:=n}
	[ "$REPLY" = "y" ]
}

# banner
_clebanner () {
cat <<EOT

   ___|  |      ____|  Command Live Environment activated
  |      |      __|    ...bit of life to the command line
  |      |      |      Learn more:$_CL cle help$_CN
 \____| _____| _____| $_CL less $CLE_RC$_CN to discover the magic
 
EOT
}

# default config
_defcf () {
	CLE_CLR=marley
	[ $UID = 0 ] && CLE_CLR=red
	CLE_P0='%e \A'
	CLE_P1='\u'
	CLE_P2='%h'
	CLE_P3='\w \$'
}

# save configuration
_savecf () {
	cat <<-EOC
	# $CLE_USER $CLE_VER
	CLE_CLR=$CLE_CLR
	CLE_P0='$CLE_P0'
	CLE_P1='$CLE_P1'
	CLE_P2='$CLE_P2'
	CLE_P3='$CLE_P3'
	EOC
} >$CLE_CF

_cle_r () {
	[ "$1" != h ] && return
	printf "\n$_Cr     ,==~~-~w^, \n    /#=-.,#####\\ \n .,!. ##########!\n((###,. \`\"#######;."
	printf "\n &######\`..#####;^###)\n$_Cw   (&@$_Cr^#############\"\n$_Cw"
	printf "    \`&&@\\__,-~-__,\n     \`&@@@@@69@&'\n        '&&@@@&'\n$_CN\n"
}

# enhanced escapes
_pesc () (
	C=_C$1
	P=CLE_P$1
	printf "\\[\$$C\\]"
	sed <<<${!P}\
	 -e "s/%i/$CLE_IP/g"\
	 -e "s/%h/$CLE_SHN/g"\
	 -e "s/%u/$CLE_USER/g"\
	 -e "s/%e/\\\[\$_CE\\\][\$_E]\\\[\$_CN\$$C\\\]/g"\
	 -e "s/%c\(.\)/\\\[\\\$_C\1\\\]/g"\
	 -e "s/%v\([[:alnum:]]*\)/\1=\$\1/g"
)

# prompt composer
_setp () {
	local CC I CI
	case "$CLE_CLR" in 
	red)	CC=RrR;;
	green)	CC=GgG;;
	yellow)	CC=YyY;;
	blue)	CC=BbB;;
	cyan)	CC=CcC;;
	magenta) CC=MmM;;
	white|grey|gray) CC=NwW;;
	tricolora) CC=RBW;;
	marley)	CC=RYG;; # Bob Marley style :-) have a smoke and imagine...
	???)	CC=$CLE_CLR;; # any 3 colors
	*)	# print help - whoa! self documented function
		printb "Unknown color '$CLE_CLR' Select one of predefined:"
		declare -f _setp|sed -n 's/\(\<[a-z |]*\)).*/\1/p' 
		echo Alternatively make your own 3-letter code using rgbcmykw/RGBCMYKW
		echo E.g. cle color rgB
		CC=NNN
	esac
	# decode colors and prompt strings
	CC=K$CC
	PS1=""
	for I in {0..3};do
		CI=_C${CC:$I:1}
		[ -z "${!CI}" ] && printb "Wrong color code '${CC:$I:1}' in $CLE_CLR" && CI=_CN
		eval _C$I="'${!CI}'"
		PS1="$PS1`_pesc $I` "
	done
	PS1="$PS1\[\$_CN\]"
	PS2="\[\$_C1\] >>>\[\$_CN\] "
	_savecf
}

# prompt callback
_prompt () {
	_E=$? # save return code
	local N D T C OI=$IFS
	# highlight error code
	[ $_E = 0 ] && _CE="" || _CE="$_Ce"
	# window title & screen name
	[ "$CLE_WT" ] && printf "\033]0;$CLE_WT $PWD\007"
	[[ $TERM =~ screen ]] && echo -en "\ek$USER\e\\"
	# rich history
	history -a
	_H=`history 1`
	unset IFS
	if [ "$_H" != "$_HO"  -a -n "$_HO" ];then
		{ read -r N D T C; echo "$D $T $CLE_USER-$$ $_E $PWD $C" >>$CLE_HIST;} <<<$_H
	fi
	_HO=$_H
	IFS=$OI
}
PROMPT_COMMAND=_prompt

# window title
_setwt () {
	CLE_WT=''
	[[ $TERM =~ linux ]] && return # no tits on console
	[[ $CLE_RC =~ remote ]] && CLE_WT="$CLE_USER -> "
	CLE_WT=$CLE_WT$USER@$CLE_SHN-$TTY
}

# filter for markdown files
mdfilter () {
	sed -e "s/^###\(.*\)/$_CL\1$_CN/"\
	 -e "s/^##\( *\)\(.*\)/\1$_CU$_CL\2$_CN/"\
	 -e "s/^#\( *\)\(.*\)/\1$_CL$_CV \2 $_CN/"\
	 -e "s/\*\*\(.*\)\*\*/$_CL\1$_CN/"\
	 -e "s/\<_\(.*\)_\>/$_CU\1$_Cu/g"\
	 -e "s/\`\`\`/$_CD~~~~~~~~~~~~~~~~~$_CN/"\
	 -e "s/\`\([^\`]*\)\`/$_Cg\1$_CN/g"
}

##
## Default aliases and functions
## -----------------------------
_defalias () {
	## ls commands aliases: l ll la lt llr l. lld
	case $OSTYPE in
	linux*) alias ls='ls --color=auto';;
	darwin*) export CLICOLOR=1;export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd;;
	FreeBSD*) alias ls='ls -G';;
	*) alias ls='ls -F' # at least some file type indication
	esac
	alias l='ls -l'
	alias ll='ls -lL'
	alias lt='ls -ltr'
	alias la='ls -al'
	alias llr='ls -lR'
	alias lld='ls -ld'
	alias l.='ls -ld .?*'
	## cd command aliases:
	## .. ...     -- up one or two levels
	## cd-        -- cd to recent dir
	## -  (dash)  -- cd to recent dir
	alias ..='cd ..'
	alias ...='cd ../..'
	alias cd-='cd -'
	## xx & cx    -- bookmark & use path; stored in $XX
	alias xx='XX=`pwd`; echo path bookmark: XX=$XX'
	alias cx='cd $XX'
	alias grep='grep --color=auto'
	alias mv='mv -i'
	alias rm='rm -i'
}

# '-' must be function, alias was troublesome
- () { cd -;}

##
## Alias management
## ----------------
CLE_ALI=$CLE_D/aliases # personalized aliases
_clexe $CLE_ALI
_defalias

aa () {
	local ABK=$CLE_ALI.back TAL=$CLE_ALI.ed
	case "$1" in
	"")	## aa         -- show aliases
                alias|sed "s/^alias \(.*\)='\(.*\)'/$_CL\1$_CN	\2/";;
	-s)	## aa -s      -- save current alias set
		cp $CLE_ALI $ABK 2>/dev/null
		alias >$CLE_ALI;;
	-l)	## aa -l      -- reload aliases
		unalias -a
		. $CLE_ALI;;
	-e)	## aa -e      -- edit and reload aliases
		alias >$ABK
		cp $ABK $TAL
		vi $TAL
		mv $TAL $CLE_ALI
		aa -l
		printb Backup in: $ABK;;
	*=*)	## aa a='b'   -- create and save new alias
		alias "$*"
		aa -s;;
	*)	cle help aa
		return 1
	esac
}

##
## History tools
## -------------
HISTFILE=$_D/.history-$CLE_USER
[ -f $HISTFILE ] || cp $HOME/.bash_history $HISTFILE
HISTCONTROL=ignoredups
HISTTIMEFORMAT="%Y-%m-%d %T "
HISTIGNORE="scrn*"
CLE_HIST=$_D/.history-ALL

## h               -- bash 'history' wrapper
h () (
	history "$@"|while read N D T C;do
		echo "$_CB$N$_Cb $D $T $_CN$_CL$C$_CN"
	done
)

## hh [opt] [srch] -- rich history viewer
hh () (
	unset IFS
	while getopts "cstdlf" O;do
		case $O in
		s) ONLY0=1;; ## hh -s           -- print successful commands only
		c) ONLYC=1;; ## hh -c           -- show just commands
		d) THIS=`date +%Y-%m-%d`;; ## hh -d           -- today's commands
		t) THIS=$CLE_USER-$$;; ## hh -t           -- commands from current session
		f) FMODE=1;NUM=0;OUTF="sort|uniq";; ## hh -f           -- show working folder history
		l) NUM=0; OUTF="less -r +G";; ## hh -l           -- show history with 'less'
		\?) cle help hh;return
	esac;done
	shift $((OPTIND-1))
	F1=${*:-${NUM:-100}}	## hh [opt]        -- no search; print recent 100 items
	grep -w "$THIS" $CLE_HIST | case $F1 in  #FILTER1 (search)
	0)	## hh [opt] 0      -- print all
		cat;;
	[1-9]|[1-9][0-9]|[1-9][0-9][0-9])
		## hh [opt] number -- find last N entries
		tail -$F1;;
	*)	## hh [opt] string -- search in history
		grep "$*"
	esac | while read -r D T U E P C;do #FILTER2 (format)
	 if [ $FMODE ]; then
		[[ $P =~ ^/ ]] && echo $P
		continue
	 fi
	 [ $E != 0 -a "$ONLY0" ] && continue
	 case $E in
	 0)	EE=$_Cg;;
	 @)	EE=$_Cc;;
	 *)	EE=$_Cr
	 esac
	 [[ "$C" =~ ^# ]] && { E='#';EE=$_Cy;C=$_Cy$C$_CN;}
	 [ "$ONLYC" ] && { [ $E = @ ] || echo $C;} ||\
		echo "$_Cb$D $T $_CB$U $EE$E $_CN$P $_CL$C$_CN"
	done | eval "${OUTF:-cat}" #FILTER3 (output)
)


# rich history record
_rhlog () {
	date "+$HISTTIMEFORMAT$CLE_USER-$$ @ $TTY [$*]" >>$CLE_HIST
}

##
## Session wrappers
## ----------------

# environment packer
_clepak () (
	H=`dirname $CLE_RD`
	D=`basename $CLE_RD`
	cd $H
	RCS="$D/rc $D/tweak"
	tar chzf - $RCS 2>/dev/null | base64 | tr -d '\n\r '
)

## ssg [user@]host -- access remote system and take CLE along
ssg () (
	[ "$1" ] || { cle help ssg;return 1;}
	C64=`_clepak`
	`command which ssh` -t $* "
		[ -w \$HOME ] && _H=\$HOME || _H=/tmp/\$USER
	       	mkdir -p \$_H; cd \$_H
		echo -n $C64|base64 --decode|tar xzf -;
		exec `basename $CLE_RD`/rc"
)

## sudd [user]     -- sudo wrapper; root is the default account
sudd () (
	sudo -i -u ${1:-root} $CLE_RC
)

## suu [user]      -- su wrapper
suu () (
	if [[ $OSTYPE =~ BSD|bsd|darwin ]];then
		su -l ${1:-root} $CLE_RC
	else
		su -l -s $BASH ${1:-root} $CLE_RC # enforce bash
	fi
)

## ksuu [user]     -- ksu wrapper
ksuu () (
	ksu ${1:-root} -a -c $CLE_RC
)

## scrn [name]     -- gnu screen wrapper, join your recent session or start new
## scrn -j [name]  -- join other screen sessions, ev. search by name
scrn () (
	SR=$CLE_USER${1:+-$1}
	[ "$1" = -j ] && SR=${2:-.}
	SCRS=`screen -ls|sed -n "/$SR/s/^[ \t]*\([0-9]*\.[^ \t]*\)[ \t]*.*/\1/p"`
	NS=`wc -w <<<$SCRS`
	if [ $NS = 0 ]; then
		[ "$1" = -j ] && echo "No screen to join" && return 1
		SCF=$CLE_D/screenrc
		SN=$TTY-CLE.$SR
		_rhlog screen -S $SN
		_scrc >$SCF
		screen -c $SCF -S $SN $CLE_RC
	else
		if [ $NS = 1 ]; then SN=$SCRS
		else
			printb "${_CU}Current '$SR' sessions:"
			PS3="$_CL choose # to join: $_CN"
			select SN in $SCRS;do
				[ $SN ] && break
			done
		fi
		_rhlog screen -x $SN
		screen -S $SN -X echo "$CLE_USER joining"
		screen -x $SN
	fi
)

# screenrc generator
_scrc () {
cat <<-EOS
	altscreen on
	autodetach on
	# enables shift-PgUp/PgDn
	termcapinfo xterm* ti@:te@
	# change window with ctrl-left/right
	bindkey "^[[1;5D" prev
	bindkey "^[[1;5C" next
	defscrollback 3000
	hardstatus alwayslastline 
	hardstatus string '%{= Kk} %-w%{+u KC}%n %t%{-u Kk}%+w %-=%{KG}$CLE_SHN%{Kg} %c'
	bind c screen $CLE_RC
	bind ^c screen $CLE_RC
	source $HOME/.screenrc
EOS
}

# default settings
PROMPT_DIRTRIM=2
shopt -s checkwinsize
CDPATH=.:..:~
[[ -d $HOME/bin && ! $PATH =~ $HOME/bin ]] && PATH=$PATH:$HOME/bin

# completion
declare -F _known_hosts >/dev/null && complete -F _known_hosts ssg

# session record
TTY=`tty|sed 's;[/dev];;g'`
_rhlog ${STY:-${SSH_CONNECTION:-$CLE_RC}}

# load modules from .cle folder
for _I in $CLE_D/mod-*;do
	_clexe $_I
done

# config & tweaks
_clexe $CLE_CF || { _clebanner;_defcf;}
_clexe $HOME/.cle-local
_clexe $CLE_RD/tweak

CLE_P3=`sed 's/%>/\\\\\$/g' <<<$CLE_P3`  # compatibility fix for removed '%>' DELETE THIS LATER
_setp
_setwt

[[ $CLE_RC =~ /clerc ]] && cat <<-EOT # run from commandline
 It seems you started CLE issuing '. $CLE_RC'
 Since this is the first run, consider setup in your profile.
 Following command will hook CLE in $HOME/.bashrc:
$_CL	cle deploy
EOT

##
## CLE command & control
## ---------------------
cle () {
	local C I MM BRC NC
	# find & run cle_* enhancement
	C=$1;shift
	if declare -f _cle_$C >/dev/null;then
		_cle_$C $*
		return $?
	elif [ -f $CLE_D/cle-$C ]; then
		. $CLE_D/cle-$C $*
		return $?
	fi
	case "$C" in
	color)	## cle color COLOR -- set prompt color
		CLE_CLR=$1
		_setp;;
	p?)	## cle p0-p3 [str] -- show/define prompt parts
		I=CLE_P${C:1:1}
		[ "$*" ] && eval "$I='$*'" || echo "$I='${!I}'"
		_setp;;
	time)	## cle time [off]  -- toggle server time in prompt
		[ "$1" = off ] && CLE_P0=%e || CLE_P0='%e \A'
		_setp;;
	title)	## cle title [off] -- toggle window title
		[ "$1" = off ] && CLE_WT='' || _setwt;;
	deploy) ## cle deploy      -- hook CLE into user's profile
		I='# Command Live Environment'
		BRC=$HOME/.bashrc
		NC='$HOME/.clerc'
		if grep -A2 "$I" $BRC;then
			printb CLE is already hooked into .bashrc
		else
			printb CLE is to be integrated to your login script.
			ask Are you sure? || return
			eval cp $CLE_RC $NC
			printb Adding lines to your .bashrc:
			echo -e "\n$I\n[ -f $NC ] && . $NC\n" | tee -a $BRC
		fi;;
	update) ## cle update      -- install fresh version of CLE
		NC=$CLE_D/clerc-new
		curl -k $CLE_SRC/clerc >$NC
		C=`sed -n 's/^#\* version: //p' $NC`
		[ "$C" ] || { echo "Download error"; return 1; }
		echo current: $CLE_VER
		echo "new:     $C"
		MM=`diff $CLE_RC $NC` && { echo No difference; return 1;}
		ask Do you want to see diff? && cat <<<"$MM"
		ask Do you want to install new version? || return
		BRC=$CLE_D/clerc-back
		cp $CLE_RC $BRC
		mv -f $NC $CLE_RC
		cle reload
		printb New CLE activated, backup saved here: $BRC;;
	reload) ## cle reload      -- reload CLE
		unset CLE_EXE
		. $CLE_RC
		echo CLE $CLE_VER;;
	reset)	## cle reset       -- reset configuration
		rm -f $CLE_CF
		cle reload;;
	mod)	## cle mod         -- cle module management
		# this is just a fallback to initialize modularity
		# downloaded cle-mod overrides this code 
		ask Activate CLE modules? || return
		I=cle-mod
		MM=$CLE_M/$I
		mkdir -p $CLE_D
		curl -k $CLE_SRC/dotcle/$I >$MM
		grep -q "# $I:" $MM || { printb Module download failed; rm -f $MM; return 1;}
		cle mod;;
	env)	## cle env         -- print CLE_* variables
		for I in ${!CLE_*};do printf "$_CL%-12s$_CN%s\n" $I "${!I}";done;;
	doc)	## cle doc         -- show documentation
		I=`curl -sk $CLE_SRC/doc/index.md`
		[[ $I =~ LICENSE ]] || { echo Unable to get documentation;return 1;}
		PS3="$_CL doc #$_CN"
		select C in $I;do
			[ $C ] && curl -sk $CLE_SRC/doc/$C |mdfilter|less -r; break
		done;;
	help)	## cle help [fnc]  -- show help
		# double hash denotes help content
		_C=`ls $CLE_D/cle-* 2>/dev/null`
		awk -F# "/[\t ]## *$1|^## *$1/ { print \$3 }" ${CLE_EXE//:/ } $_C;;
	"")	_clebanner
		sed -n 's/^#\*\(.*\)/\1/p' $CLE_RC;; # header
	*)	echo unimplemented: cle $C
		echo check cle help
		return 1
	esac
}

# remove disturbing stuff
unset SUDO_COMMAND _D _I _N _C
fi
# that's all folks...

