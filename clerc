#
## CLE :: Command Live Environment
## author: Michael Arbet (marbet@redhat.com)
## version: 3.2  15 August 2016
## license: GNU GPL 3
## https://gitlab.cee.redhat.com/marbet/cle
##
# bash tweaks
# - colorized prompt with exit code highlight
# - builtin aliases and function
# - history tweaks (timestamps etc)
# - shell options
# - command 'cle' to control the environment
# - builtin self documentation feature (cle help & cle readme)
#
# Execute this file within your shell session once and integrate
# to your profile seamlessly with 'cle deploy local' command
# 
#        $ . clerc
#        $ cle deploy user
#
# - use implemented 'ssg' (ssh workaround) and seamlessly pass
#   this environment to remote machine without installation
# - try 'suu' (sudo workaround) 
# - change settings with implememted 'cle' command

#echo DEBUG: CLE starts ${BASH_SOURCE[0]}

# check if this is interactive session and if not, skip all the tweaks
# this is required for scp compattibility if initiated from .bashrc
if [ -n "TERM" -a "$TERM"!="dumb" ]; then
CLE_LCLUSER=`whoami`

CLE_RC=${BASH_SOURCE[0]}
case $CLE_RC in
/*)	;;
*)	CLE_RC=$PWD/$CLE_RC ;;
esac
CLE_EXE=$CLE_RC
CLE_VERSION=`grep -m1 "# version:" $CLE_RC | cut -d' ' -f3-`

# determine effective user and custom script
# CLE_EFUSER is passed to all consecutive sessions initiated with ssg/suu
CLE_CUSTOMRC=$HOME/.cle-${CLE_EFUSER:=$CLE_LCLUSER}

# where in the deep space is CLE growing... you may change with your own url
CLE_SOURCE='https://gitlab.cee.redhat.com/marbet/cle/raw/master'
 
# tweaked hostname to remove some substrings (redhat and gss only)
CLE_HN=`hostname | sed -e 's/.redhat.com//' -e 's/.gsslab//'`
# CLE_HN=`hostname`

# default prompt settings
CLE_TIME='\A'
CLE_COLOR='marley'
CLE_PROMPT=$HOME/.cleprompt-$CLE_EFUSER

# default shell settings can ge overridden later
export EDITOR=vi
export PAGER="less -s"
HISTCONTROL=ignorespace:ignoredups:erasedups
HISTTIMEFORMAT="%d%b %H:%M:%S  "
shopt -s checkwinsize

# Internal helper functions
#
# print banner
_clebanner () {
cat <<EOT

   ___|  |      ____|    Command Live Environment activated
  |      |      __|      ...bit of life to the command line
  |      |      |           'cle help' to learn more 
 \____| _____| _____|    or 'less $CLE_RC' to learn the magic
                      
EOT
}

# execute associated script and log its filename into CLE_EXE to keep track
# also ensure the script will be executed only once
_clexe () {
	echo $CLE_EXE|grep -q $1 && return
	[ -f $1 ] && CLE_EXE=$CLE_EXE:$1 && . $1
}

# save prompt related variables
_clepromptsave () {
	echo CLE_COLOR=\'$CLE_COLOR\' >$CLE_PROMPT
	echo CLE_TIME=\'$CLE_TIME\' >>$CLE_PROMPT
}

# colorize prompt
_clecolor () {
	local C1 C2 C3
	case "$1" in 
	red)	 C1="\[\e[1;31m\]"; C3="\[\e[0;31m\]" ;;
	green)	 C1="\[\e[1;32m\]"; C3="\[\e[0;32m\]" ;;
	yellow)	 C1="\[\e[1;33m\]"; C3="\[\e[0;33m\]" ;;
	blue)	 C1="\[\e[1;34m\]"; C3="\[\e[0;34m\]" ;;
	magenta) C1="\[\e[1;35m\]"; C3="\[\e[0;35m\]" ;;
	cyan)	 C1="\[\e[1;36m\]"; C3="\[\e[0;36m\]" ;;
	white)	 C1="\[\e[1;37m\]"; C3="\[\e[0;37m\]" ;;
	bold)    C1="\[\e[1m\]" ;;
	grey|gray) C1="\[\e[0;37m\]"; C2="\[\e[0m\]"; C3="\[\e[1;37m\]" ;;
	tricolora) C1="\[\e[1;31m\]"; C2="\[\e[1;34m\]"; C3="\[\e[1;37m\]" ;;
	rgb)	 C1="\[\e[1;31m\]"; C2="\[\e[1;32m\]"; C3="\[\e[1;34m\]" ;;
	marley) # ... bobmarley style :-) have a smoke and imagine...
		C1="\[\e[1;31m\]"; C2="\[\e[1;33m\]"; C3="\[\e[1;32m\]" ;;
	*)
		# search available colors in the function
		echo " unknown color $1, select one of those:"
		set|sed -n '/_clecolor ()/,/^}/s/\(\<[a-z]*\)).*/\1/p'
		return 2
	esac
	# compose prompts
	CLE_PS="$C1\u $C2$CLE_HN $C3\w \\$"
	PS2="$C1 >>>\\$\[\e[m\] "
	CLE_COLOR=$1
}

# prompt function - called upon each new prompt line
_cleprompt () {
	local EE=$?  # store exit status code (it would disappear!)
	if [ $EE -eq 0 ]; then
		EEPS="\[\e[1;30m\][$EE] $CLE_TIME"
	else
		EEPS="\[\e[1;41m\][$EE]\[\e[m\e[1;30m\] $CLE_TIME"
	fi
	# Final prompt composition
	PS1="$EEPS $CLE_PS\[\e[m\] "
	# change window title
	# TERMPORARY DISABLED
	# echo -en "\e]0;$CLE_EFUSER -> $LOGNAME@$CLE_HN: $PWD\007"
}
PROMPT_COMMAND=_cleprompt

case $CLE_RC in
*.clerc-tmp-*)	# old good .bashrc :-) but only from temporary environment
	_clexe $HOME/.bashrc
	;;
*/clerc)	# this looks like initial run from commandline
	_clebanner
	echo "If this is your first run, consider setting up in your profile."
	echo "Issue following command to copy source script into $HOME/.clerc"
	echo "and activate the environment in $HOME/.bashrc"
	echo
	echo "     [1m cle deploy user [0m"
	echo
	;;
esac

# local setup like e.g CLE_COLOR, CLE_PS, CLE_HN, CLE_TIME, anything...
_clexe $HOME/.clerc_local
_clexe $CLE_PROMPT

# execute plugins from .cle folder
for PLUG in $HOME/.cle/*; do
	_clexe $PLUG
done

_clecolor $CLE_COLOR

# basic aliases - those might be overridden by .aliases file
#
## CLE internal aliases and functions:
## -----------------------------------
## ls commands aliases: l ll la lt llr l.
alias ls='ls --color=auto'
alias ll='ls -l'
alias l='ls -l'
alias lt='ls -ltr'
alias la='ls -al'
alias llr='ls -lR'
alias l.='ls -ld .?*'
## cd command aliases:  .. ... (up one or two levels); c- (cd to the recent dir)
alias ..='cd ..'
alias ...='cd ../..'
alias c-='cd -'
## xx & cx       -- directory bookmark; set it and 'cd' there
# what about to define x1/c1, x2/c2, etc...
alias xx='XPOINT=`pwd`; echo Directory boorkmark set here: $XPOINT'
alias cx='cd $XPOINT'
alias grep='grep --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias hh=history

# store basic alias set if there is none
[ -f $CLE_ALIASES ] || alias >$CLE_ALIASES

# personalized aliases
CLE_ALIASES=$HOME/.aliases-$CLE_EFUSER
HISTFILE=$HOME/.bash_history-$CLE_EFUSER  # private history files
_clexe $CLE_ALIASES

#
# functions
#

## path          -- show $PATH in readable way
path () {
	echo $PATH|tr : \\n
}

## psg           -- ps filtered through grep
psg () {
 ps -ef |grep -i $1|grep -v grep
}

##
## alias management
## ----------------
aa () {
	case "$1_$2" in
	_)
		## aa         -- show aliases
		alias ;;
	save_)
		## aa save    -- save your set of aliases
		alias
		echo; read -p "ENTER for save, Ctrl-C"
		alias >$CLE_ALIASES
		echo Saved to file .$CLE_ALIASES
		;;
	load_)
		## aa load    -- (re)load your set of aliases
		unalias -a
		. $CLE_ALIASES
		;;
	edit_)
		## aa edit    -- edit and reload your aliases
		local TALIAS=$HOME/.aiases-tmp-$CLE_EFUSER
		alias >$TALIAS
		vi $TALIAS
		echo; read -p "ENTER to reload, Ctrl-C to break"
		mv $TALIAS $CLE_ALIASES
		aa load
		;;
	*)	
                echo " what??  'aa $1 $2'"
                echo " check this: cle help"
                ;;
	esac
}

##
## SSH & SUDO wrappers:
## --------------------
## ssg [user@]hostname  -- login to remote system running this environment
# You can replace 'ssg' with 'ssh' although this is not recommended
ssg () {
	cd
	if [ -n "$1" ]; then
		cp $CLE_RC .clerc-tmp-$LOGNAME 2>/dev/null
		CLE_64=`tar czf - .clerc-tmp-$LOGNAME $CLE_MYFILES|base64|tr -d '\n\r '`
		`which ssh` -t $1 "
			echo $CLE_64|base64 -d |tar xzf -
			export CLE_EFUSER=$CLE_EFUSER;
			exec bash --rcfile .clerc-tmp-$LOGNAME"
	else
		cle help ssg
	fi
	unset CLE_64
	cd -
}

## suu [username]       -- sudo wrapper; root is the default account
suu () {
	cd
	cp $CLE_RC .clerc-tmp-$LOGNAME 2>/dev/null
	CLE_64=`tar czf - .clerc-tmp-$LOGNAME $CLE_MYFILES|base64|tr -d '\n\r '`
	sudo -i -u ${1:-root} /bin/bash  -c \
		"echo $CLE_64|base64 -d | tar xzf -;
		 export CLE_EFUSER=$CLE_EFUSER;
		 exec bash --rcfile .clerc-tmp-$LOGNAME"
	unset CLE_64
	cd -
}

##
## CLE command & control:
## ----------------------
cle () {
	case "$1_$2" in
	color_*)
		## cle color blue|green|red|marley|..etc  -- set prompt color
		_clecolor $2
		_clepromptsave
		;;
	time_on)
		## cle time on|off     -- turn server time in prompt on/off
		CLE_TIME='\A'
		_clepromptsave
		;;
	time_off)
		CLE_TIME=''
		_clepromptsave
		;;
	time_*)
		## cle time STRING     -- set custom strings
		shift
		CLE_TIME="$*"
		_clepromptsave
		;;
	deploy_user)
		## cle deploy user     -- hook CLE into user's profile
		cp $CLE_RC $HOME/.clerc
		grep -q '# Command Live Environment' $HOME/.bashrc 
		if [ $? != 0 ]; then
			echo; echo " CLE is to be integrated to your login script."
			read -p " Are you sure? (y/N)  "
			[ "$REPLY" != 'y' ] && return
			echo >>$HOME/.bashrc
			echo >>$HOME/.bashrc '# Command Live Environment'
			echo >>$HOME/.bashrc '[ -f $HOME/.clerc ] && . $HOME/.clerc'
			echo >>$HOME/.bashrc
			echo ' ... added following to the end of .bashrc :'
			tail -3 $HOME/.bashrc
		else
			echo " CLE is already hooked into .bashrc :"
			tail -3 $HOME/.bashrc
		fi
		;;
	deploy_system)
		## cle deploy system   -- hook CLE into /etc/profile.d
		echo; echo " CLE is to be integrated into your system!"
		echo " Content of $CLE_RC will be copied to /etc/profile.d/cle.sh"
		echo " The environment will be activated for all users."
		echo " Only root can do that..."
		read -p " Are you sure? (y/N)  "
		[ "$REPLY" != 'y' ] && return
		cp $CLE_RC /etc/profile.d/cle.sh
		echo " Done!"
		;;
	edit_)
		## cle edit            -- edit resource file
		echo "CLE edit .... to be implemented later"
		;;
	reload_)
		## cle reload          -- reload CLE
		#unset CLE_PS
		unset CLE_EXE
		. $CLE_RC
		;;
	clean_)
		## cle clean           -- remove aliases, and local settings
		read -p "Cleaning CLE settings, are you sure? (y/N)  "
		[ "$REPLY" != 'y' ] && return
		unalias -a
		rm -f $CLE_ALIASES $CLE_PROMPT ~/.clerc_local
		cle reload
		;;
	env_)
		## cle env             -- show CLE related variables
		( set -o posix; set|grep CLE_)
		;;
	ls_)
		## cle ls              -- ls -l $HOME/.cle*
		ls -l $HOME/.aliases* $HOME/.cle*
		;;
	update_)
		## cle update          -- download newest version of CLE
		curl -k $CLE_SOURCE/clerc >$HOME/clerc-new
		echo "New CLE has been stored here: $HOME/clerc-new"
		read -p "Press Enter to show diff or Ctrl-C to break"
		diff $CLE_RC $HOME/clerc-new
		# no setup for now, need to think more about it
		;;
	readme_)
		## cle readme          -- download and show README file
		curl -k $CLE_SOURCE/README.md |less
		;;
	help_*)
		## cle help [cmd]      -- self documenting feature
		# double-hash denotes help content :-)
		[ -z "$2" ] && _clebanner
		awk -F# "/## *$2/"' { print $3 }' $CLE_RC
		;;
	*)
		echo " what??  'cle $1 $2'"
		echo " check this: cle help"
		;;
	esac
}

# enhance path with user's own bin directory
[ -d $HOME/bin ] && echo $PATH | grep -vq $HOME/bin && PATH=$PATH:$HOME/bin

unset SUDO_COMMAND    # remove disturbing stuff

_clexe $CLE_CUSTOMRC  # run personal tweaks

# indicate first run, show banner
[ -f $CLE_PROMPT ] || _clebanner && _clepromptsave

fi # End of login shell setup

# that's all the magic :-)

