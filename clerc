#
## Copyright (C) 2016-2017 by Michael Arbet 
##
## CLE :: Command Live Environment
## author: Michael Arbet (marbet@redhat.com)
## version: v3 2017-02-09
## home: https://github.com/micharbet/CLE
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# Command line tweaks:
# - colorized prompt incl exit code highlight
# - builtin aliases and functions
# - history tweaks (timestamps etc)
# - personalized history for multi-admin environment
#
# Execute this file within your shell session once and integrate
# to your profile seamlessly with 'cle deploy local' command
# 
#	$ . clerc
#	$ cle deploy user
#
# * use 'ssg' (ssh wrapper) to access remote system, CLE is seamlessly
#   transferred without installation
# * try 'suu' (sudo wrapper) with similar effect
# * change settings with implememted 'cle' command
# * built-in self documentation feature ('cle help' & 'cle readme')
# * manage your aliases using 'aa' function
# * use 'hh' function to ease history management
# * two deploymenty options
# * self update from GIT source

# check running in interactive session and if not, skip all the tweaks
# required for scp compattibility
if [ -n "TERM" -a "$TERM" != "dumb" -a -z "$CLE_EXE" ]; then
CLE_LCUSER=`whoami`

CLE_RC=${BASH_SOURCE[0]}
case $CLE_RC in
/*)	;;
*)	CLE_RC=$PWD/$CLE_RC
esac
CLE_EXE=$CLE_RC:

# where in the deep space is CLE growing and which version...
CLE_SRC=https://raw.githubusercontent.com/micharbet/CLE/master
CLE_VERSION=`grep -m1 "# version:" $CLE_RC | cut -d' ' -f3-`

# determine effective user and custom script
# CLE_EFUSER is passed to all consecutive sessions initiated with ssg/suu
CLE_CUSTOMRC=$HOME/.cleusr-${CLE_EFUSER:=$CLE_LCUSER}

# tweaked hostname, can be altered in .clerc-local or .clecust-$CLE_EFUSER
CLE_THN=`hostname |sed 's;\.\w\+\.\w\+$;;'` # remove domain, leave subdomains
CLE_IP=`echo -n $SSH_CONNECTION | cut -d' ' -f3`

# default settings
CLE_PTIME='\A'
CLE_PCOLOR='marley'
CLE_CF=$HOME/.clecf-$CLE_EFUSER

# color table initializattion
CT_N=`tput sgr0` # reset
CT_L=`tput bold`
CT=`tput setaf 0`; CT_k=$CT_N$CT; CT_K=$CT_L$CT
CT=`tput setaf 1`; CT_r=$CT_N$CT; CT_R=$CT_L$CT
CT=`tput setaf 2`; CT_g=$CT_N$CT; CT_G=$CT_L$CT
CT=`tput setaf 3`; CT_y=$CT_N$CT; CT_Y=$CT_L$CT
CT=`tput setaf 4`; CT_b=$CT_N$CT; CT_B=$CT_L$CT
CT=`tput setaf 5`; CT_m=$CT_N$CT; CT_M=$CT_L$CT
CT=`tput setaf 6`; CT_c=$CT_N$CT; CT_C=$CT_L$CT
CT=`tput setaf 7`; CT_w=$CT_N$CT; CT_W=$CT_L$CT
CT_E=`tput setab 1; tput setaf 7` # err highlight

# default shell settings
export EDITOR=vi
export PAGER="less -s"
HISTFILE=$HOME/.bash_history-$CLE_EFUSER
HISTCONTROL=ignorespace:ignoredups
HISTTIMEFORMAT="%d%b %H:%M:%S  "
PROMPT_DIRTRIM=2
shopt -s checkwinsize

#
# Internal helper functions
#
printb () { printf "$CT_L$*$CT_N\n"; }
ask () { read -p "$CT_L$*$CT_N"; }

# print banner
_clebanner () {
cat <<EOT

   ___|  |      ____|  Command Live Environment activated
  |      |      __|    ...bit of life to the command line
  |      |      |      Learn more:$CT_L cle help $CT_N
 \____| _____| _____| $CT_L less $CLE_RC$CT_N to discover the magic
 
EOT
}

# execute script and log its filename into CLE_EXE to keep track
# also ensure the script will be executed only once
_clexe () {
	echo $CLE_EXE|grep -q $1: && return
	[ -f $1 ] && { CLE_EXE=$CLE_EXE$1: ; . $1; }
}

# save configuration
_savecf () {
	echo CLE_PCOLOR=\'$CLE_PCOLOR\'
	echo CLE_P1=\'$CLE_P1\'
	echo CLE_P2=\'$CLE_P2\'
	echo CLE_P3=\'$CLE_P3\'
	echo CLE_PTIME=\'$CLE_PTIME\'
} >$CLE_CF

# prepare prompt string
_pstr () {
	local PP=">" # I hate $ in prompt
	[ $UID == 0 ] && PP="#"
	echo $*|sed \
	 -e "s/%i/$CLE_IP/" \
	 -e "s/%h/$CLE_THN/" \
	 -e "s/%e/$CLE_EFUSER/" \
	 -e "s/%>/$PP/"
}

# prompt composer
_setpr () {
	local C0 C1 C2 I II PP 
	case "$1" in 
	red)	 C0=$CT_r; C2=$CT_R;;
	green)	 C0=$CT_g; C2=$CT_G;;
	yellow)	 C0=$CT_y; C2=$CT_Y;;
	blue)	 C0=$CT_b; C2=$CT_B;;
	magenta) C0=$CT_m; C2=$CT_M;;
	cyan)	 C0=$CT_c; C2=$CT_C;;
	white|grey|gray) C0=$CT_N; C1=$CT_w; C2=$CT_W;;
	bold)    C0=$CT_L;;
	tricolora) C0=$CT_R; C1=$CT_B; C2=$CT_W;;
	marley) # ... Bob Marley style :-) have a smoke and imagine...
		C0=$CT_R; C1=$CT_Y; C2=$CT_G;;
	???)	# ... any 3 colors
		for I in 0 1 2; do
			II=CT_${1:$I:1}
			[[ -z "${!II}" ]] && echo "wrong color code '${1:$I:1}' in $1" && return 2
			declare C$I=${!II}
		done;;
	*)	# print help self documented function :)
		echo "Unknown color '$1' Select one of predefined:"
		declare -f _setpr|sed -n -e 's/\ *\(\<[a-zA-Z |]*\)).*/ \1 /p' 
		echo "Or create your own 3-letter style using: rgbcmykw / RGBCMYKW"
		echo " e.g. 'cle color rgB'"
		return 2 
	esac
	# prepare prompt strings
	CLE_PS="\[$C0\]`_pstr $CLE_P1` \[$C1\]`_pstr $CLE_P2` \[$C2\]`_pstr $CLE_P3`"
	PS2="\[$C0\] >>>\[$CT_N\] "
	CLE_PCOLOR=$1
	_savecf
}

# prompt function - called upon each new prompt line
_cleprof () {
	local EEP EE=$?  # store exit status code (it would disappear!)
	if [ $EE -eq 0 ]; then
		EEP="\[$CT_K\][$EE]"
	else
		EEP="\[$CT_E\][$EE]\[$CT_N$CT_K\]"
	fi
	# final prompt composition
	PS1="$EEP${CLE_PTIME:+ $CLE_PTIME} $CLE_PS\[$CT_N\] "
	# change window title
	[ -n "$CLE_WT" ] && printf "\033]0;$CLE_WT $PWD\007"
}
PROMPT_COMMAND=_cleprof

# default window title
_defwt () {
	CLE_WT=''
	[[ $TERm =~ 'linux' ]] && return # no tits on console
	[[ $CLE_RC =~ remote ]] && CLE_WT="$CLE_EFUSER -> "
	CLE_WT="$CLE_WT$CLE_LCUSER@$CLE_THN:"
}

# default prompt
_defpr () {
	CLE_P1='\u'
	CLE_P2='%h'
	CLE_P3='\w %>'
}

# indicate first run, show banner, create default conf
[ -f $CLE_CF ] || { _clebanner; _defpr; _savecf; }

# how the CLE was started?
case $CLE_RC in
*.clerc-remote-*)
	# transferred through ssg/suu, run also old good .bashrc :-)
	_clexe $HOME/.bashrc ;;
*/clerc*)
	# initial run from commandline
	cat <<-EOT
	 It seems you started CLE from command line issuing '. $CLE_RC'
	 Since this is your first run, consider setting up in your profile.
	 Following command will hook CLE in your $HOME/.bashrc
	$CT_L  cle deploy user$CT_N
	EOT
esac

# load config and custom tweaks
_clexe $CLE_CF
# transition to CLE_Px; remove this later
grep -q CLE_P1 $CLE_CF || { _defpr; _savecf; }

_clexe $HOME/.clerc-local
_clexe $CLE_CUSTOMRC
_defwt
_setpr $CLE_PCOLOR

# load modules from .cle folder
for MOD in $HOME/.cle/mod-*; do
	_clexe $MOD
done
unset MOD

# enhance path with user's own bin directory
[ -d $HOME/bin ] && echo $PATH | grep -vq $HOME/bin && PATH=$PATH:$HOME/bin

##
## CLE default aliases and functions:
## ----------------------------------
_defalias () {
	## ls commands aliases: l ll la lt llr l.
	alias ls='ls --color=auto'
	alias l='ls -l'
	alias ll='ls -l'
	alias lt='ls -ltr'
	alias la='ls -al'
	alias llr='ls -lR'
	alias l.='ls -ld .?*'
	## cd command aliases:
	## .. ...     -- up one or two levels
	## cd-        -- cd to recent dir
	## -  (dash)  -- cd to recent dir
	alias ..='cd ..'
	alias ...='cd ../..'
	alias cd-='cd -'
	## xx & cx    -- path bookmark; set and 'cd' later, stored in $XX
	alias xx='XX=`pwd`; echo path boorkmark set here: XX=$XX'
	alias cx='cd $XX'
	alias grep='grep --color=auto'
	alias mv='mv -i'
	alias rm='rm -i'
}

# '-' must be function, alias was troublesome
- () { cd -; }

##
## alias management
## ----------------
CLE_ALIASES=$HOME/.aliases-$CLE_EFUSER # personalized aliases
_clexe $CLE_ALIASES
_defalias

aa () {
	local ALIASBAK=$CLE_ALIASES.back
	case "$1" in
	"")	## aa         -- show aliases
		alias ;;
	s)	## aa s       -- save your set of aliases
		alias
		ask "ENTER for save, Ctrl-C to exit"
		cp $CLE_ALIASES $ALIASBAK
		alias >$CLE_ALIASES
		echo Saved to file: $CLE_ALIASES
		echo Backup in: $ALIASBAK ;;
	l)	## aa l       -- (re)load your set of aliases
		unalias -a
		. $CLE_ALIASES ;;
	ed)	## aa ed      -- edit and reload your aliases
		local TALIAS=$CLE_ALIASES.edit
		alias >$ALIASBAK
		cp $ALIASBAK $TALIAS
		vi $TALIAS
		mv $TALIAS $CLE_ALIASES
		aa l
		echo Backup in: $ALIASBAK ;;
	*)	
		echo " unimplemented: aa $1 $2"
		cle help aa
	esac
}

##
## history management
## ------------------
hh () {
	case $1 in
	"")	## hh         -- just print history
		history ;;
	s)	## hh s       -- save current history in $HISTFILE
		history -a ;;
	l)	## hh l       -- load history, use save & load to share history
		history -n ;;
	[0-9]|[0-9][0-9]|[0-9][0-9][0-9])
		## hh number  -- print last N entries
		history $1 ;;
	*)	## hh string  -- search in history
		history | grep -i $1
	esac
}

##
## various functions
## -----------------
## path       -- show $PATH in readable way
path () { echo $PATH|tr : \\n; }

## psg        -- ps filtered through grep
psg () { ps -ef |grep -i $1|grep -v grep; }

## dfh        -- df -h wrapper
dfh () { df -h; }

## dush, dusk -- du wrappers
dush () {
	if [ $# -eq 0 ]; then
		du -sh * | sort -h
	else
		du -sh $* | sort -h
	fi
}

dusk () {
	if [ $# -eq 0 ]; then
		du -sk * | sort -n
	else
		du -sk $* | sortn -n
	fi
}

##
## SSH & SUDO wrappers:
## --------------------
## ssg [user@]hostname  -- access remote system and take CLE along
ssg () {
	pushd $HOME >/dev/null
	local CLE_RMTRC=.clerc-remote-$CLE_EFUSER
	if [ -n "$1" ]; then
		cp $CLE_RC $CLE_RMTRC 2>/dev/null
		local SSGFILES=$CLE_RMTRC
		[ -f $CLE_CUSTOMRC ] && SSGFILES="$SSGFILES $(basename $CLE_CUSTOMRC)"
		local CLE_64=`tar chzf - $SSGFILES |base64|tr -d '\n\r '`
		`/usr/bin/which ssh` -t $1 "
			echo $CLE_64|base64 --decode |tar xzf -;
			export CLE_EFUSER=$CLE_EFUSER;
			exec bash --rcfile $CLE_RMTRC"
	else
		cle help ssg
	fi
	popd >/dev/null
}

## suu [username]       -- sudo wrapper; root is the default account
suu () {
	pushd $HOME >/dev/null
	local CLE_RMTRC=.clerc-remote-$CLE_EFUSER
	cp $CLE_RC $CLE_RMTRC 2>/dev/null
	local SSGFILES=$CLE_RMTRC
	[ -f $CLE_CUSTOMRC ] && SSGFILES="$SSGFILES $(basename $CLE_CUSTOMRC)"
	local CLE_64=`tar chzf - $SSGFILES |base64|tr -d '\n\r '`
	sudo -i -u ${1:-root} /bin/bash  -c \
		"echo $CLE_64|base64 --decode| tar xzf -;
		 export CLE_EFUSER=$CLE_EFUSER;
		 exec bash --rcfile $CLE_RMTRC"
	popd >/dev/null
}

##
## CLE command & control:
## ----------------------
cle () {
	case "$1_$2" in
	color_*) ## cle color COLOR    -- set prompt color
		_setpr $2 ;;
	p[1-3]_*)	## cle p1-3 string    -- define prompt part 1-3
		shift ;;& #initialization
	p1_*)	CLE_P1="${*:-\\u}" ;;&
	p2_*)	CLE_P2="${*:-%h}" ;;&
	p3_*)	CLE_P3="${*:-\\w %>}" ;;&
	px_)	## cle px             -- reset prompting to default
		_defpr ;&
	p[1-3]_*) # common part
		_setpr $CLE_PCOLOR ;;
	time_on) ## cle time on|off    -- toggle server time in prompt
		CLE_PTIME='\A'
		_savecf ;;
	time_off)
		CLE_PTIME=''
		_savecf ;;
	title_on) ## cle title on|off   -- toggle window title
		_defwt ;;
	title_off)
		CLE_WT="" ;;
	deploy_user)
		## cle deploy user    -- hook CLE into user's profile
		local CLID='# Command Live Environment'
		local BRC=$HOME/.bashrc
		cp $CLE_RC $HOME/.clerc
		grep -q "$CLID" $BRC 
		if [ $? != 0 ]; then
			printb "CLE is to be integrated to your login script."
			ask " Are you sure? (y/N) "
			[ "$REPLY" != 'y' ] && return
			echo -e >>$BRC \\n$CLID
			echo -e >>$BRC '[ -f $HOME/.clerc ] && . $HOME/.clerc\n'
			printf '\n ... added following to the end of .bashrc :\n'
			tail -4 $BRC
		else
			echo "CLE is already hooked into .bashrc :"
			grep -A2 "$CLID" $BRC
		fi ;;
	deploy_system)
		## cle deploy system  -- hook CLE into /etc/profile.d
		cat <<-EOT
		 CLE is to be integrated into this host $CT_R$(hostname)$CT_N
		 File $CLE_RC will be copied to $CT_L/etc/profile.d/cle.sh$CT_N
		 So the environment will be activated for all users.
		 Only root can do that...
		EOT
		ask "Are you sure? (y/N) "
		[ "$REPLY" != 'y' ] && return
		cp $CLE_RC /etc/profile.d/cle.sh
		echo " Done!" ;;
	update_) ## cle update         -- download newest version of CLE
		if [[ $CLE_RC =~ remote ]]; then
			cat <<-EOT
			 CLE is running through remote session.
			 Update is pointless.
			EOT
			return 2
		fi
		local NCLE=$HOME/clerc-new
		curl -k $CLE_SRC/clerc >$NCLE
		printb "New CLE here: $NCLE"
		echo "current: $CLE_VERSION"
		echo "new:     `sed -n '/#\sversion/s/.\+:\s//p' $NCLE`"
		ask "Do you want to see diff? (y/N)"
		[ "$REPLY" == "y" ] && diff $CLE_RC $NCLE
		ask "Do you want to install new version? (y/N) "
		[ "$REPLY" != 'y' ] && return
		cp $CLE_RC $HOME/clerc-orig
		mv $NCLE $CLE_RC
		cle reload
		printb "New CLE has been installed, previous version saved here: $HOME/clerc-orig" ;;
	reload_) ## cle reload         -- reload CLE
		unset CLE_EXE
		. $CLE_RC ;;
	env_)	## cle env            -- print CLE_* variables
		set | grep ^CLE_.*= ;;
	readme_) ## cle readme         -- download and show README file
		curl -k $CLE_SRC/README.md |less ;;
	help_*) ## cle help [cmd]     -- self documenting feature
		# double-hash denotes help content :-)
		[ -z "$2" ] && _clebanner
		awk -F# "/## *$2/"' { print $3 }' $CLE_RC ;;
	_)	_clebanner ;;
	*)	# run any _cle_* function
		# those might be defined in custom files
		# or as modules in .cle/mod-*
		local CLEF=$1
		if declare -f _cle_$CLEF >/dev/null; then
			shift
			_cle_$CLEF $*
		else
			echo " 'cle $1' not implemeted"
			echo "  check cle help"
		fi
	esac
}

# remove disturbing stuff
unset SUDO_COMMAND

fi # End of login shell setup
# and that's all the magic :-)

