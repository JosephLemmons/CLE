#!/bin/sh
##
## ** CLE : Command Live Environment **
##
#* author:  Michael Arbet (marbet@redhat.com)
#* home:    https://github.com/micharbet/CLE
#* version: 2019-03-15 (Zodiac)
#* license: GNU GPL v2
#* Copyright (C) 2016-2019 by Michael Arbet

## ** WARNING! **
## This code is in super early development stage.
## Do not use, otherwise a puppy or kitten may die!
##

# Check if the shell is interactive session and CLE not yet started
# This is required for scp compatibility
[ -t 0 -a -z "$CLE_EXE" ] || return
# Now it really starts, warning: magic inside!


# Startup sequence
case $ZSH_NAME$BASH:$0 in
*bash:*bash) # bash session resource
	CLE_RC=$BASH_SOURCE
	;;
*zsh:*zsh) # zsh session resource (started AS TEMPORARY .zshrc)
	# we know value of CLE_RC
	unset ZDOTDIR
	;;
*zsh:*/rc*) # started FROM .zshrc
	CLE_RC=$0
	;;
*:/*/rc*) # executed as a command from .cle directory
	CLE_RC=$(cd `dirname $0`;pwd;)/$(basename $0) # full path to this file
	SH=$SHELL
	while [ $1 ]; do
		case $1 in
		-b*)	SH=`which bash`		# force bash
			export CLE_ARG='-b'
			;;
		-z*)	SH=`which zsh 2>/dev/null || which bash` # try zsh
			[[ $SH =~ bash ]] && echo "No ZSH available, fallback to $SH"
			export CLE_ARG='-z'
			;;
		-m)	CLE_MOTD=`uptime`
			export CLE_MOTD
			;;
		*)	echo "$0: unknown option '$1'"; exit 1;;
		esac
		shift
	done
	export CLE_PROF=1
	case $SH in
	*zsh)
		export ZDOTDIR=/tmp/`whoami`
		mkdir -p $ZDOTDIR
		ln -sf $CLE_RC $ZDOTDIR/.zshrc
		exec zsh
		;;
	*)
		exec bash --rcfile $0
		;;
	esac
	;;
*:*clerc*)	# first run!
	RD=$HOME/.cle-`whoami`
	export CLE_1=$0
	mkdir -p $RD
	cp $0 $RD/rc1
	chmod 755 $RD/rc1
	exec $RD/rc1 "$@"
	;;
*)	echo something unknown;;
esac


# Variables init

# CLE_RC can be relative path, make it full
CLE_RD=$(cd `dirname $CLE_RC`;pwd;)
CLE_RC=$CLE_RD/`basename $CLE_RC`

# FQDN hack
CLE_FHN=`hostname -f 2>/dev/null || hostname`
[ ${#CLE_FHN} -lt ${#HOST} ] && CLE_FHN=$HOST
CLE_IP=${CLE_IP:-`cut -d' ' -f3 <<<$SSH_CONNECTION`}

# where in the deep space CLE grows
CLE_SRC=https://raw.githubusercontent.com/micharbet/CLE/Zodiac
CLE_VER=`sed -n 's/^#\* version: //p' $CLE_RC`

# current shell
CLE_SH=`basename $BASH$ZSH_NAME`

# find writable folder
_H=$HOME
[ -w $_H ] || _H=/var/tmp/$USER
[ -r $HOME ] || HOME=$_H
[ $CLE_USER ] || cd
CLE_D=$_H/`sed 's:/.*/\(\..*\)/.*:\1:' <<<$CLE_RC`
mkdir -m 755 -p $CLE_D

# config, tweak, etc...
CLE_CF=$CLE_D/cf-$CLE_FHN
CLE_AL=$CLE_D/al
CLE_HIST=$_H/.clehistory
_N=`sed 's:.*/rc1*::' <<<$CLE_RC`
CLE_WS=${_N/-/}
CLE_TW=$CLE_RD/tw$_N
CLE_ENV=$CLE_RD/env$_N
CLE_TTY=`tty|tr -d '/dev'`

# who I am
_N=`sed -n 's;.*cle-\(.*\)/.*;\1;p' <<<$CLE_RC`
export CLE_USER=${CLE_USER:-${_N:-$(whoami)}}

# Internal functions

_clebnr () {
cat <<EOT

   ___| |     ____|  Command Live Environment activated
  |     |     __|    ...bit of life to the command line
  |     |     |      Learn more:$_CL cle help$_CN and$_CL cle doc$_CN
 \____|_____|_____|  Uncover the magic:$_CL less $CLE_RC$_CN

EOT
}

# boldprint
printb () { printf "$_CL$*$_CN\n";}

# simple question
ask () {
	local PR="$_CL$* (y/N) $_CN"
	[ $ZSH_NAME ] && read -ks "?$PR" || read -n 1 -s -p "$PR"
	echo ${REPLY:=n}
	[ "$REPLY" = "y" ]
}

# execute script and log its filename into CLE_EXE
# also ensure the script will be executed only once
_clexe () {
	[ -f "$1" ] || return 1
	[[ $CLE_EXE =~ :$1[:$] ]] && return
	CLE_EXE=$CLE_EXE:$1
	source $1
}
CLE_EXE=$CLE_RC

# Create color table
_cletable () {
	_C_=$TERM
	_CN=`tput sgr0`
	_CL=`tput bold`
	_CU=`tput smul`;_Cu=`tput rmul`
	_CV=`tput rev`
	_CI=`tput sitm`;_Ci=`tput ritm`
	_CD=`tput dim`
	_Ck=$_CN$(tput setaf 0);_CK=$_Ck$_CL
	_Cr=$_CN$(tput setaf 1);_CR=$_Cr$_CL
	_Cg=$_CN$(tput setaf 2);_CG=$_Cg$_CL
	_Cy=$_CN$(tput setaf 3);_CY=$_Cy$_CL
	_Cb=$_CN$(tput setaf 4);_CB=$_Cb$_CL
	_Cm=$_CN$(tput setaf 5);_CM=$_Cm$_CL
	_Cc=$_CN$(tput setaf 6);_CC=$_Cc$_CL
	_Cw=$_CN$(tput setaf 7);_CW=$_Cw$_CL
	_Ce=`tput setab 1;tput setaf 7` # err highlight
}

# set prompt colors
_cleclr () {
	local C I CI
	case "$1" in
	red)    C=RrR;;
	green)  C=GgG;;
	yellow) C=YyY;;
	blue)   C=BbB;;
	cyan)   C=CcC;;
	magenta) C=MmM;;
	white|grey|gray) C=NwW;;
	tricolora) C=RBW;;
	marley) C=RYG;; # Bob Marley style :-) have a smoke and imagine...
	???|????)    C=$1;; # any 3/4 colors
	*)      # print help on colors
		printb "Unknown color '$1' Select predefined scheme:"
		declare -f _cleclr|sed -n 's/[ \t]*(*\(\<[a-z |]*\)).*/  \1/p'
		echo Alternatively create your own 3-letter combo using rgbcmykw/RGBCMYKW
		echo E.g. $_CL cle color rgB
		return 1
	esac
	# decode colors and prompt strings
	C=K${C}L
	for I in {0..4};do
		eval "CI=\$_C${C:$I:1}"
		[ -z "$CI" ] && printb "Wrong color code '${C:$I:1}' in $1" && CI=$_CN
		eval "_C$I=\$CI"
	done
}

# CLE prompt escapes
_clesc () (
	# bash/zsh specific sequences
	if [ $ZSH_NAME ]; then
		SHESC="-e 's/\\\\n/\$_PN/g'
		 -e 's/\\^[$%#]/%#/g'
		 -e 's/\\\\d/%D{%a %b %d}/g'
		 -e 's/\\\\D/%D/g'
		 -e 's/\\\\h/%m/g'
		 -e 's/\\\\H/%M/g'
		 -e 's/\\\\j/%j/g'
		 -e 's/\\\\l/%l/g'
		 -e 's/\\\\s/zsh/g'
		 -e 's/\\\\t/%*/g'
		 -e 's/\\\\T/%D{%r}/g'
		 -e 's/\\\\@/%@/g'
		 -e 's/\\\\A/%T/g'
		 -e 's/\\\\u/%n/g'
		 -e 's/\\\\w/%$PROMPT_DIRTRIM~/g'
		 -e 's/\\\\W/%1~/g'
		 -e 's/\\\\!/%!/g'
		 -e 's/\\\\#/%i/g'
		 -e 's/\\\\\[/%{/g'
		 -e 's/\\\\\]/%}/g'
		 -e 's/\\\\\\\\/\\\\/g'
		"
	else
		SHESC="-e 's/\^[$%#]/\\\\\$/g'"
	fi
	EXTESC="
	 -e 's/\^i/\$CLE_IP/g'
	 -e 's/\^h/\$CLE_SHN/g'
	 -e 's/\^H/\$CLE_FHN/g'
	 -e 's/\^U/\$CLE_USER/g'
	 -e 's/\^g/\$(gitwb)/g'
	 -e 's/\^e/\\$_PE\$_CE\\$_Pe\[\$_EC\]\\$_PE\$_CN\$_C0\\$_Pe/g'
	 -e 's/\^c\(.\)/\\$_PE\\\$_C\1\\$_Pe/g'
	 -e 's/\^v\([[:alnum:]]*\)/\1=\$\1/g'
	 -e 's/\^\^/\^/g'
	"
	SUBS=`tr -d '\n\t' <<<$SHESC$EXTESC`
	eval sed "$SUBS" <<<"$*"
)

# override default prompt strings with configured values
_clepcp () {
	local I
	for I in 0 1 2 3 T; do
		eval "CLE_P$I=\${CLE_PB$I:-\$CLE_P$I}"
		[ $ZSH_NAME ] && eval "CLE_P$I=\${CLE_PZ$I:-\$CLE_P$I}"
		[ $1 ] && unset CLE_P{B,Z}$I
	done
}

# craft the prompt from defined strings
_cleps () {
	[ "$CLE_PT" ] && PS1="$_PE\${_CT}$(_clesc $CLE_PT)\${_Ct}$_Pe" || PS1=''
	PS1=$PS1`_clesc "^c0$CLE_P0 ^c1$CLE_P1 ^c2$CLE_P2 ^c3$CLE_P3 ^cN^c4"`
	PS2=`_clesc "^c3>>> ^cN^c4"`
}

# default prompt strings and colors
_cledefp () {
	CLE_P0='^e \t'
	CLE_P1='\u'
	CLE_P2='^h'
	CLE_P3='\w ^$'
	CLE_PT='$CLE_SH: \u@^H'
	case "$USER-$CLE_WS" in
	root-)	_DEFC=red;;
	*-)	_DEFC=marley;;
	root-*)	_DEFC=RbB;;
	*-*)	_DEFC=blue;;
	esac
}

# save configuration
_clesave () (
	date +"# CLE/$CLE_VER %Y-%m-%d %H:%M:%S"
	vv "CLE_CLR|CLE_PB.|CLE_PZ."
) >$CLE_CF


# prompt callback functions
precmd () {
	_EC=$? # save return code
	local IFS S DT C
	unset IFS
	[ $BASH ] && C=`HISTTIMEFORMAT=";$CLE_HTF;" history 1` || C=`fc -lt ";$CLE_HTF;" -1`
	C=${C#*;}
	DT=${C/;*}
	C=${C/$DT;}
	C="${C#"${C%%[![:space:]]*}"}"
	if [[ $C =~ ^# ]]; then
		_clerh  "$DT" '' \# note "$C"
	elif [ $_SST ]; then
		S=$((SECONDS-_SST))
		_clerh "$DT" $S $_EC $PWD "$C"
		[ $_EC = 0 ] && _CE="" || _CE="$_Ce"
		_SST=
	else
		_CE=''; _EC=0
	fi
	[ $BASH ] && trap _clepreex DEBUG
}

# run this function before the issued command
preexec () {
	_SST=$SECONDS
	echo -n $_CN
}

# Bash hack
_clepreex () {
	[ "$BASH_COMMAND" = $PROMPT_COMMAND ] && return
	trap "" DEBUG
	preexec "$BASH_COMMAND"
}

# rich history record
_clerh () {
	local DT EXC
	[ $_NORH ] && unset _NORH && return
	# exclude regexp
	EXC="^vv\ |^cd\ |^cd$|^-$|^\.\.$|^\.\.\.$|^xx$|^aa$|^lscreen"
	if [ $# -lt 5 ]; then
		DT=`date "+$CLE_HTF"`
	else
		DT=$1
		shift
	fi
	[[ $4 =~ $EXC ]] && return
	echo -E "$DT;$CLE_USER-${CLE_SH:0:1}$$;$1;$2;$3;$4" >>$CLE_HIST
}


# Use alias built-ins for startup
unset -f alias unalias 2>/dev/null

# Run profile files
if [ -n "$CLE_PROF" ]; then
	_clexe /etc/profile
	_clexe $HOME/.${CLE_SH}rc
	unset CLE_PROF
fi

# print MOTD + more
if [ "$CLE_MOTD" ]; then
	[ -f /etc/motd ] && cat /etc/motd
	printf "\n$CLE_MOTD"
	printb "\n CLE/$CLE_SH $CLE_VER\n"
	unset CLE_MOTD
fi

# read inherited environment
[ $CLE_WS ] && _clexe $CLE_ENV

# colorize LS
case $OSTYPE in
linux*)		alias ls='ls --color=auto';;
darwin*)	export CLICOLOR=1; export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd;;
FreeBSD*)       alias ls='ls -G "$@"';;
*)		alias ls='ls -F';; # at least some file type indication
esac

# colorized GREP except on busybox
if [ -L `command which grep` ];then
	unalias grep egrep fgrep xzgrep xzegrep xzfgrep zgrep zegrep zfgrep
else
	alias grep='grep --color=auto'
fi

# Remove alias 'which' if there is no version supporting extended options
{ alias|command which -i which || unalias which; } >/dev/null 2>&1

## ** cd command enhancements **
## `.. ...`     - up one or two levels
## `-`  (dash)  - cd to recent dir
- () { cd -;}
.. () { cd ..;}
... () { cd ../..;}
## `xx` & `cx`   - bookmark $PWD & use later
xx () { _XX=$PWD;_clerh '' '*' $PWD ''; echo path bookmark: $_XX; }
cx () { cd $_XX; }

##
## ** Alias management **
aa () {
	local AED=$CLE_AL.ed
	local Z=${ZSH_NAME:+-L}
	case "$1" in
	"")	## `aa`         - show aliases
		builtin alias $Z|sed "s/^alias \([^=]*\)=\(.*\)/$_CL\1$_CN\t\2/";;
	-s)	## `aa -s`      - save aliases
		builtin alias $Z >$CLE_AL;;
	-e)	## `aa -e`      - edit aliases
		builtin alias $Z >$AED
		vi $AED
		[ $ZSH_NAME ] && builtin unalias -m '*' || builtin unalias -a
		. $AED;;
	*=*)	## `aa a='b'`   - create new alias and save
		builtin alias "$*"
		aa -s;;
	*)	builtin alias "$*";;
	esac
}

##
## ** History tools **
## REWORKING RICH HISTORY FROM SCRATCH
## `h`               - shell 'history' wrapper
CLE_HTF=
h () {
	([ $BASH ] && HISTTIMEFORMAT=";$CLE_HTF;" history "$@" || fc -lt ";$CLE_HTF;" "$@")|( IFS=';'; while read -r N DT C;do
		echo -E "$_CB$N$_Cb $DT $_CN$_CL$C$_CN"
	done;) 
	_NORH=1
}

## `hh [opt] [srch]` - rich history viewer
hh () {
	case "$1" in
	'')	SEARCH="tail -100 $CLE_HIST"
		;;
	*[!0-9]*)
		SEARCH="grep '$1' $CLE_HIST"
		;;
	*)	SEARCH="tail -$1 $CLE_HIST"
		;;
	esac

	OUTF=_clehhout
	# commands only
	#OUTF="sed -n 's/^[^;]*;[^;]*;[^;]*;[0-9]*;[^;]*;\(.*\)/\1/p'"
	# directories
	#OUTF="sed -n 's/^[^;]*;[^;]*;[^;]*;[0-9]*;\([^;]*\);.*/\1/p'"

	eval "$SEARCH | $OUTF"
	_NORH=1
}

# rich history colorful output filter
_clehhout () (
	IFS=';'
	while read -r DT SID SEC EC D C; do
		case $EC in
		 0) CE=$_Cg; CC=$_CN;;
		 @) CE=$_Cg; CC=$_Cg;;
		 '#'|$|'*') CE=$_CY; CC=$_Cy;;
		 *) CE=$_Cr; CC=$_CN;;
		esac
		printf "$_CB%s $_Cb%s $_CB%4s $CE%-3s $CC%s  $_CL" "$DT" "$SID" "$SEC" "$EC" "$D"
		cat <<<$C
	done
)

## `vv 'regexp'`   - dump variables in reusable way
vv () (
	typeset 2>/dev/null | awk '/.* \(\)/{exit} /^('$1')=/{gsub(/\\C-\[/,"\\E");print}'
)

# zsh hack to accept notes on cmdline
[ $ZSH_NAME ] && '#' () { true; }

##
## ** Not-just-internal tools **
## `gitwb`           - show current working branch name
gitwb () (
	# go down the folder tree and look for .git
	while [ $PWD != / ]; do
		[ -d .git ] && { git symbolic-ref --short HEAD; return; }
		cd ..
	done
	return 1  # not in git repository
	)


## `mdfilter`        - markdown acsii highlighter
mdfilter () {
	sed -e "s/^###\(.*\)/$_CL\1$_CN/"\
	 -e "s/^##\( *\)\(.*\)/\1$_CU$_CL\2$_CN/"\
	 -e "s/^#\( *\)\(.*\)/\1$_CL$_CV \2 $_CN/"\
	 -e "s/\*\*\(.*\)\*\*/$_CL\1$_CN/"\
	 -e "s/\<_\(.*\)_\>/$_CU\1$_Cu/g"\
	 -e "s/\`\`\`/$_CD~~~~~~~~~~~~~~~~~$_CN/"\
	 -e "s/\`\([^\`]*\)\`/$_Cg\1$_CN/g"
}


##
## ** Live session wrappers **

# Environment packer
_clepak () {
	RH=${CLE_RD/\/.*/}
	RD=${CLE_RD/$RH\//}

	if [ $CLE_WS ]; then
		cd $RH
		RC=${CLE_RC/$RH\//}
		TW=${CLE_TW/$RH\//}
		EN=${CLE_ENV/$RH\//}
	else
		RH=/var/tmp/$USER
		mkdir -m 0755 -p $RH/$RD
		cd $RH
		RC=$RD/rc-$CLE_FHN
		TW=$RD/tw-$CLE_FHN
		EN=$RD/env-$CLE_FHN
		cp $CLE_RC $RC
		cp $CLE_TW $TW
		echo "# evironment $CLE_USER@$CLE_FHN" >$EN
		vv "CLE_P..|_C." >>$EN
		vv "$CLE_EXP" >>$EN
		cat $CLE_AL >>$EN
	fi
	[ $1 ] && C64=`eval tar chzf - $RC $TW $EN 2>/dev/null | base64 | tr -d '\n\r '`
}

## `lssh [usr@]host`   - access remote system and take CLE along
lssh () (
	[ "$1" ] || { cle help lssh;return 1;}
	_clepak tar
	command ssh -t $* "
		H=/var/tmp/\$USER; mkdir -m 755 -p \$H; cd \$H
		[ $OSTYPE = darwin ] && _D=D || _D=d
		echo -n $C64|base64 -\$_D |tar xzf - 2>/dev/null
		exec \$H/$RC -m $CLE_ARG"
)

## `lsudo [user]`      - sudo wrapper; root is the default account
lsudo () (
	_clepak
        sudo -i -u ${1:-root} $RH/$RC $CLE_ARG
)

## `lsu [user]`        - su wrapper
lsu () (
        _clepak
	S=
        [[ $OSTYPE =~ [Ll]inux ]] && S="-s /bin/sh"
        eval su $S -l ${1:-root} $RH/$RC
)

## `lksu [user]`       - ksu wrapper
lksu () (
	_clepak
        ksu ${1:-root} -a -c $RH/$RC
)

## `lscreen [name]`    - gnu screen wrapper, join your recent session or start new
## `lscreen -j [name]` - join other screen sessions, ev. search by name
lscreen () (
	NM=$CLE_USER${1:+-$1}
	[ "$1" = -j ] && NM=${2:-.}
	SCRS=`screen -ls|sed -n "/$NM/s/^[ \t]*\([0-9]*\.[^ \t]*\)[ \t]*.*/\1/p"`
	NS=`wc -w <<<$SCRS`
	if [ $NS = 0 ]; then
		[ "$1" = -j ] && echo "No screen to join" && return 1
		SCF=$CLE_D/screenrc
		SN=$CLE_TTY-CLE.$NM
		_clerh '' @ $CLE_TTY "screen -S $SN"
		_clescrc >$SCF
		printf "$_CT screen: $CLE_FHN$_Ct"
		screen -c $SCF -S $SN $CLE_RC
	else
		if [ $NS = 1 ]; then SN=$SCRS
		else
			printb "${_CU}Current '$NM' sessions:"
			PS3="$_CL choose # to join: $_CN"
			select SN in $SCRS;do
				[ $SN ] && break
			done
		fi
		_clerh '' @ $CLE_TTY "screen -x $SN"
		printf "$_CT screen: joined to $SN$_Ct"
		screen -S $SN -X echo "$CLE_USER joining"
		screen -x $SN
	fi
)

# screenrc generator
_clescrc () {
cat <<-EOS
	source $HOME/.screenrc
	altscreen on
	autodetach on
	# enables shift-PgUp/PgDn
	termcapinfo xterm* ti@:te@
	# change window with ctrl-left/right
	bindkey "^[[1;5D" prev
	bindkey "^[[1;5C" next
	defscrollback 9000
	hardstatus alwayslastline
	hardstatus string '%{= Kk} %-w%{Wk}%n %t%{-}%+w %-=%{+b Y}$CLE_SHN%{G} %c'
	bind c screen $CLE_RC
	bind ^c screen $CLE_RC
EOS
}


# config, tweaks, env

_clexe $HOME/.cle-local
_clexe $CLE_AL
_clexe $CLE_TW
[ $ZSH_NAME ] && setopt +o NOMATCH
for M in $CLE_RD/mod-*; do
	_clexe $M
done

[[ -d $HOME/bin && ! $PATH =~ $HOME/bin ]] && PATH=$PATH:$HOME/bin

# shorten hostname
CLE_SHN=`eval sed "${CLE_SRE:-'s:\.[^.]*\.[^.]*$::'}" <<<$CLE_FHN`

# create the prompt in several steps
# 1. default prompt strings
_cledefp

# 2. override with inherited strings
[ $CLE_WS ] && _clepcp x

# 3. create color table if necessary
[ "$TERM" != "$_C_" -o -z "$_CN" ] && _cletable

# 4. get values from config file
# transition from older config
[ -r $CLE_CF ] && read Z <$CLE_CF	# transition
[[ ${Z:-Zodiac} =~ Zodiac ]] || {	# transition
	C=`grep CLE_CLR $CLE_CF`	# transition
	mv $CLE_CF $CLE_CF-Nova		# transition
	eval $C				# transition
	_clesave			# transition
}					# transition
_clexe $CLE_CF
_clepcp

# 5. termnal specific
case $TERM in
linux)	 CLE_PT='';;	# no tits on console
screen*) CLE_PT='\u'
	_CT=$'\ek'; _Ct=$'\e\\';;
*)	_CT=$'\e]0;'; _Ct=$'\007';;
esac

# 6. shell specific
if [ $BASH ]; then
	shopt -s checkwinsize
	_PE='\['; _Pe='\]'
else
	setopt PROMPT_SUBST SH_WORD_SPLIT
	_PE='%{'; _Pe='%}'
	_PN=$'\n' # zsh doesn't know '\n' as escape sequence! WTF?
fi

# 7. craft the prompt string
_cleps
_cleclr ${CLE_CLR:-$_DEFC}

PROMPT_COMMAND=precmd
PROMPT_DIRTRIM=3

HISTCONTROL=ignoredups
HISTFILE=$CLE_D/history-$CLE_SH
CLE_HTF='%F %T'

# completions
_clecomp () {
	local A=(color p0 p1 p2 p3 cf title mod env update reload doc help)
	local C
	COMPREPLY=()
	case $3 in
	p0) COMPREPLY="'$CLE_P0'";;
	p1) COMPREPLY="'$CLE_P1'";;
	p2) COMPREPLY="'$CLE_P2'";;
	p3) COMPREPLY="'$CLE_P3'";;
	#'') COMPREPLY=$A;;
	esac
	[ "$3" != "$1" ] && return
	for C in ${A[@]}; do
		[[ $C =~ ^$2 ]] && COMPREPLY+=($C)
	done
}

if [ $BASH ]; then
	# lssh completion
	declare -F _known_hosts >/dev/null && complete -F _known_hosts lssh
	_C=/usr/share/bash-completion
	[ -f $_C ] && . $_C/bash_completion && . $_C/completions/ssh && complete -F _ssh lssh
else
	# ZSH completions
	autoload compinit && compinit
	autoload bashcompinit && bashcompinit
	compdef lssh=ssh
fi
complete -F _clecomp cle

# redefine alias builtins
alias () {
	if [ -n "$1" ]; then
		aa "$@"
	else
		builtin alias
	fi
}

unalias () {
	[ "$1" = -a ] && cp $CLE_AL $CLE_AL.bk  # BASH only!
	builtin unalias "$@"
	aa -s
}

# check manual start
[ $CLE_1 ] && cat <<EOT
 It seems you started CLE running '$CLE_1' from command line
 Since this is the first run, consider setup in your profile.
 Run following command to hook CLE into your $HOME/.${CLE_SH}rc:
$_CL    cle deploy
EOT

[ -r . ] || cd

# record this startup into rich history
_clerh '' @ "${STY:-${CLE_WS:-WS}}->$CLE_TTY($TERM)" "$CLE_SH $CLE_RC  $CLE_VER"

##
## ** CLE command & control **
cle () {
	local C I P S
	C=$1;shift
	if declare -f _cle_$C >/dev/null;then
		_cle_$C $*
		return $?
	elif [ -f $CLE_D/cle-$C ]; then
		. $CLE_D/cle-$C $*
		return $?
	fi
	case $C in
	color)  ## `cle color COLOR`       - set prompt color
		[ $1 ]  && _cleclr $1 && CLE_CLR=$1 && _clesave;;
	p?)	## `cle p0-p3 [str]`       - show/define prompt parts
		I=${C:1:1}
		if [ "$1" ]; then
			P=B; [[ $* =~ % && -n "$ZSH_NAME" ]] && P=Z || unset CLE_PZ$I
			S=$*
			eval "[ \"\$S\" != \"\$CLE_P$I\" ] && { CLE_P$P$I='$*';_clepcp;_cleps;_clesave; }"
		else
			vv CLE_P$I
		fi;;
	title)	## `cle title off|string`  - turn off window title or set the string
		[ "$1" = off ] && CLE_PT='' || CLE_PT=${1:-'$CLE_SH: ^u@^H'}
		_cleps;;
	cf)	## `cle cf [ed|reset]`     - view/edit/reset/revert configuration
		case "$1" in
		ed)	vi $CLE_CF  && . $CLE_RC;;
		reset)	mv $CLE_CF $CLE_CF-bk;;
		revert)	cp $CLE_CF-bk $CLE_CF;;
		"")
			if [ -f $CLE_CF ]; then
				printb $_CU$CLE_CF:
				cat $CLE_CF
			else
				echo Default/Inherited configuration
			fi
			return;;
		esac
		cle reload;;
	deploy) ## `cle deploy`            - hook CLE into user's profile
		cp $CLE_RC $CLE_D/rc
		CLE_RC=$CLE_D/rc
		unset CLE_1
		I='# Command Live Environment'
		SHRC=$HOME/.${CLE_SH}rc
		grep -A1 "$I" $SHRC && printb CLE is already hooked in $SHRC && return 1
		ask "Do you want to add CLE to $SHRC?" || return
		echo -e "\n$I\n[ -f $CLE_RC ] && . $CLE_RC\n" | tee -a $SHRC
		cle reload;;
	update) ## `cle update`            - install fresh version of CLE
		NC=$CLE_D/rc.new
		curl -k $CLE_SRC/clerc >$NC      # always update from master branch
		C=`sed -n 's/^#\* version: //p' $NC`
		[ "$C" ] || { echo "Download error"; return 1; }
		echo current: $CLE_VER
		echo "new:     $C"
		MM=`diff $CLE_RC $NC` && { echo No difference; return 1;}
		ask Do you want to see diff? && cat <<<"$MM"
		ask Do you want to install new version? || return
		BRC=$CLE_D/rc.bk
		cp $CLE_RC $BRC
		chmod 755 $NC
		mv -f $NC $CLE_RC
		cle reload
		printb New CLE activated, backup saved here: $BRC;;
	reload) ## `cle reload [bash|zsh]` - reload CLE
		SH=${1:-$CLE_SH}
		exec $CLE_RC -$SH
		case $SH in
		bash)	exec bash --rcfile $CLE_RC;;
		zsh)	exec zsh -c $CLE_RC;;
		*)	echo no such shell: $1
			return 1;;
		esac;;
	env)	## `cle env`               - inspect variables
		vv 'CLE.*'|awk -F= "{printf \"$_CL%-12s$_CN%s\n\",\$1,\$2}";;
	help|-h|--help) ## `cle help [fnc]`        - show help
		# double hash denotes help content
		C=`ls "$CLE_D/cle-*" 2>/dev/null`
		awk -F# "/[\t ]## *\`*$1|^## *\`*$1/ { print \$3 }" ${CLE_EXE//:/ } $C | mdfilter | less -erFX;;
	"")
		_clebnr
		sed -n 's/^#\*\(.*\)/\1/p' $CLE_RC
		;;
	*)
		echo unimplemented: cle $C;
		echo check cle help;
		return 1
		;;
	esac
}

##
unset _N _H _C _DEFC

# that's all, folks...

