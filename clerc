#
# CLE : Command Live Environment
#
#* authors: Michael Arbet (marbet@redhat.com)
#*          Jakub Arbet (arbetjakub@gmail.com)
#* home:    https://github.com/micharbet/CLE
#* version: v3 2017-03-21 (Spring)
#* license: GNU GPL v2
#*
#* Copyright (C) 2016-2017 by Michael Arbet 
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# Command line tweaks:
# - colorized prompt incl exit code highlight
# - builtin aliases and functions
# - history tweaks (timestamps etc)
# - personalized history for multi-admin environment
#
# Execute this file within your shell session once and integrate
# to your profile seamlessly with 'cle deploy local' command
# 
#	$ . clerc
#	$ cle deploy user
#
# * use 'ssg' (ssh wrapper) to access remote system, CLE is seamlessly
#   transferred without installation
# * try 'suu' (sudo wrapper) with similar effect
# * change settings with implememted 'cle' command
# * built-in self documentation feature ('cle help' & 'cle readme')
# * manage your aliases using 'aa' function
# * use 'hh' function to ease history management
# * self update from GIT source

# check running in interactive session and if not, skip all the tweaks
# required for scp compattibility
if [ -n "TERM" -a "$TERM" != "dumb" -a -z "$CLE_EXE" ]; then

# execute script and log its filename into CLE_EXE to keep track
# ensure the script will be executed only once
_clexe () {
	echo $CLE_EXE|grep -q $1: && return
	if [[ -f $1 ]]; then
		CLE_EXE=$CLE_EXE$1:
		[[ -n "$CLE_VERB" ]] &&  echo clexe: $1
		. $1
	fi
}

# where I'm running?
CLE_RC=${BASH_SOURCE[0]}
[[ $CLE_RC =~ ^/ ]] || CLE_RC=$PWD/$CLE_RC
CLE_EXE=$CLE_RC:
[[ -n "$CLE_VERB" ]] && echo CLE startup: $CLE_RC

# how the CLE was started?
case $CLE_RC in
*.clerc-remote-*) # transferred through ssg/suu, run also old good .bashrc :-)
	_clexe $HOME/.bashrc
	CLE_DIR=`dirname $CLE_RC` ;;
*/clerc*) # initial run from commandline
	cat <<-EOT
	 It seems you started CLE from command line issuing '. $CLE_RC'
	 Since this is your first run, consider setting up in your profile.
	 Following command will hook CLE in your $HOME/.bashrc
	$CT_L  cle deploy user$CT_N
	EOT
	CLE_DIR=$HOME ;;
*)	# locally deployed
	CLE_DIR=$HOME
esac

# where in the deep space is CLE growing and which version...
CLE_SRC=https://raw.githubusercontent.com/micharbet/CLE/master
CLE_VERSION=`sed -n 's/^#\* version: //p' $CLE_RC`

# path to custom configuration files
CLE_CF=$CLE_DIR/.clecf-$CLE_USER
CLE_CUSTOMRC=$CLE_DIR/.cleusr-${CLE_USER:=$USER}

# tweaked hostname, can be altered in .clerc-local or .cleusr-$CLE_USER
CLE_THN=`hostname |sed 's;\.\w\+\.\w\+$;;'` # remove domain, leave subdomains
CLE_IP=`echo -n $SSH_CONNECTION | cut -d' ' -f3`

# color table initializattion
CT_N=`tput sgr0` # reset
CT_L=`tput bold`
CT_U=`tput smul`; CT_UE=`tput rmul`
CT_D=`tput dim`
CT_RV=`tput rev`
CT=`tput setaf 0`; CT_k=$CT_N$CT; CT_K=$CT_L$CT
CT=`tput setaf 1`; CT_r=$CT_N$CT; CT_R=$CT_L$CT
CT=`tput setaf 2`; CT_g=$CT_N$CT; CT_G=$CT_L$CT
CT=`tput setaf 3`; CT_y=$CT_N$CT; CT_Y=$CT_L$CT
CT=`tput setaf 4`; CT_b=$CT_N$CT; CT_B=$CT_L$CT
CT=`tput setaf 5`; CT_m=$CT_N$CT; CT_M=$CT_L$CT
CT=`tput setaf 6`; CT_c=$CT_N$CT; CT_C=$CT_L$CT
CT=`tput setaf 7`; CT_w=$CT_N$CT; CT_W=$CT_L$CT
CT_E=`tput setab 1; tput setaf 7` # err highlight

# default shell settings
export EDITOR=vi
export PAGER="less -s"
HISTFILE=$CLE_DIR/.history-$CLE_USER
HISTCONTROL=ignorespace:ignoredups
HISTTIMEFORMAT="%d%b %H:%M:%S  "
PROMPT_DIRTRIM=2
shopt -s checkwinsize

#
# Internal helper functions
#
printb () { printf "$CT_w$*$CT_N\n"; }
ask () { read -p "$CT_L$*$CT_N"; }

# print banner
_clebanner () {
cat <<EOT

   ___|  |      ____|  Command Live Environment activated
  |      |      __|    ...bit of life to the command line
  |      |      |      Learn more:$CT_L cle help $CT_N
 \____| _____| _____| $CT_L less $CLE_RC$CT_N to discover the magic
 
EOT
}

# self documentation extractor
# double-hash denotes printable notes
_hlp () {
	if [ -f $1 ]; then
		echo $* |xargs -n 1 awk -F# "/[\t ]##|^##/ { print \$3 }"
	else
		local HF=`echo $CLE_EXE | tr : '\n' |grep mod-.\*$1`
		[ -n "$HF" ] && _hlp $HF || echo ...there is no help for you
	fi
}

# save configuration
_savecf () {
	echo "# CLE $CLE_VERSION"
	echo CLE_PCOLOR=\'$CLE_PCOLOR\'
	echo CLE_P0=\'$CLE_P0\'
	echo CLE_P1=\'$CLE_P1\'
	echo CLE_P2=\'$CLE_P2\'
	echo CLE_P3=\'$CLE_P3\'
} >$CLE_CF

# prompt enhancements
_pstr () {
	local PP=">" # I hate $ in prompt
	[ $UID == 0 ] && PP="#"
	echo $*|sed \
	 -e "s/%i/$CLE_IP/" \
	 -e "s/%h/$CLE_THN/" \
	 -e "s/%u/$CLE_USER/" \
	 -e "s/%e/\\\$_E/" \
	 -e "s/%c\(.\)/\\\[\\\$CT_\1\\\]/g" \
	 -e "s/%v\([[:alnum:]]*\)/\\\${\1:+\1=\$\1}/g" \
	 -e "s/%>/$PP/"
}

_cle_e () {
	[ "$1" != e ] && return
	printf "$CT_C\nH ${CT_c}CL${CT_C}E $CT_W  .-*$CT_R)$CT_W\`\`-. $CT_C\n"
	printf "a   a $CT_W /  $CT_R(($CT_b*$CT_W   '.$CT_C\np   s$CT_W |  $CT_b*$CT_R))$CT_W     #:"
	printf "$CT_C\np   t $CT_W \\  $CT_R(($CT_b*$CT_W   .'$CT_C\ny   er $CT_W '-.$CT_R)${CT_W}_.-'\n\n$CT_N"
}

# prompt composer
_setpr () {
	local C0 C1 C2 I II P0 
	case "$CLE_PCOLOR" in 
	red)	 C0=$CT_r; C2=$CT_R;;
	green)	 C0=$CT_g; C2=$CT_G;;
	yellow)	 C0=$CT_y; C2=$CT_Y;;
	blue)	 C0=$CT_b; C2=$CT_B;;
	magenta) C0=$CT_m; C2=$CT_M;;
	cyan)	 C0=$CT_c; C2=$CT_C;;
	white|grey|gray) C0=$CT_N; C1=$CT_w; C2=$CT_W;;
	bold)    C0=$CT_L;;
	tricolora) C0=$CT_R; C1=$CT_B; C2=$CT_W;;
	marley) # ... Bob Marley style :-) have a smoke and imagine...
		C0=$CT_R; C1=$CT_Y; C2=$CT_G;;
	???)	# ... any 3 colors
		for I in 0 1 2; do
			II=CT_${CLE_PCOLOR:$I:1}
			[[ -z "${!II}" ]] && echo "wrong color code '${CLE_PCOLOR:$I:1}' in $CLE_PCOLOR" && return 2
			declare C$I=${!II}
		done;;
	*)	# print help - whoa! self documented function :)
		echo "Unknown color '$CLE_PCOLOR' Select one of predefined:"
		declare -f _setpr|sed -n -e 's/\ *\(\<[a-zA-Z |]*\)).*/ \1 /p' 
		echo "Or create your own 3-letter style using: rgbcmykw / RGBCMYKW"
		echo " e.g. 'cle color rgB'"
		return 2 
	esac
	# prepare prompt strings
	_PS1="\[$C0\]`_pstr $CLE_P1` \[$C1\]`_pstr $CLE_P2` \[$C2\]`_pstr $CLE_P3`"
	_PS0=`_pstr $CLE_P0`
	PS2="\[$C0\] >>>\[$CT_N\] "
	_savecf
}

# prompt function - called upon each new prompt line
_cleprf () {
	_E=$? # save last return code
	local EE
	# highilighted error code only in P0
	if [ $_E -eq 0 ]; then
		EE="[0]"
	else
		EE="\[$CT_E\][$_E]\[$CT_N$CT_K\]"
	fi
	# final prompt composition
	PS1="\[$CT_K\]${_PS0/'$_E'/$EE} $_PS1 \[$CT_N\]"
	# change window title
	[ -n "$CLE_WT" ] && printf "\033]0;$CLE_WT $PWD\007"
}
PROMPT_COMMAND=_cleprf

# default window title
_defwt () {
	CLE_WT=''
	[[ $TERM =~ 'linux' ]] && return # no tits on console
	[[ $CLE_RC =~ remote ]] && CLE_WT="$CLE_USER -> "
	CLE_WT="$CLE_WT$USER@$CLE_THN:"
}

# default prompt
_defpr () {
	CLE_PCOLOR='marley'
	CLE_P0='%e \A'
	CLE_P1='\u'
	CLE_P2='%h'
	CLE_P3='\w %>'
}

# filter for markdown files
mdfilter () {
	sed -e "s/^###\(.*\)/$CT_L\1$CT_N/" \
	 -e "s/^##\(\s*\)\(.*\)/\1$CT_U$CT_L\2$CT_N/" \
	 -e "s/^#\(\s*\)\(.*\)/\1$CT_L$CT_RV\2$CT_N/" \
	 -e "s/\*\*\(.*\)\*\*/$CT_L\1$CT_N/" \
	 -e "s/\<_\(.*\)_\>/$CT_U\1$CT_UE/g" \
	 -e "s/\`\([^\`]*\)\`/$CT_w\1$CT_N/g"
}

# indicate first run, show banner, create default conf
[ -f $CLE_CF ] || { _clebanner; _defpr; _savecf; }

# load config and custom tweaks
[[ -n "$CLE_VERB" ]] && echo -n "CLE config:  "
_clexe $CLE_CF
[[ -n "$CLE_VERB" ]] && { cat $CLE_CF; echo; }

_clexe $CLE_DIR/.clerc-local
_clexe $CLE_CUSTOMRC
_defwt
_setpr $CLE_PCOLOR

# load modules from .cle folder
for MOD in $CLE_DIR/.cle/mod-*; do
	_clexe $MOD
done
unset MOD

# enhance path with user's own bin directory
[ -d $HOME/bin ] && echo $PATH | grep -vq $HOME/bin && PATH=$PATH:$HOME/bin

##
## CLE default aliases and functions:
## ----------------------------------
_defalias () {
	## ls commands aliases: l ll la lt llr l.
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
                alias ls='ls --color=auto'
        elif [[ "$OSTYPE" == "darwin"* ]]; then
                export CLICOLOR=1
                export LSCOLORS="ExGxBxDxCxEgEdxbxgxcxd"
        elif [[ "$OSTYPE" == "freebsd"* ]]; then
                alias ls='ls -G'
	else
		alias ls='ls -F' # at least some file type indication
        fi
	alias l='ls -l'
	alias ll='ls -l'
	alias lt='ls -ltr'
	alias la='ls -al'
	alias llr='ls -lR'
	alias l.='ls -ld .?*'
	## cd command aliases:
	## .. ...     -- up one or two levels
	## cd-        -- cd to recent dir
	## -  (dash)  -- cd to recent dir
	alias ..='cd ..'
	alias ...='cd ../..'
	alias cd-='cd -'
	## xx & cx    -- path bookmark; set and 'cd' later, stored in $XX
	alias xx='XX=`pwd`; echo path boorkmark set here: XX=$XX'
	alias cx='cd $XX'
	alias grep='grep --color=auto'
	alias mv='mv -i'
	alias rm='rm -i'
}

# '-' must be function, alias was troublesome
- () { cd -; }

##
## alias management
## ----------------
CLE_ALIASES=$CLE_DIR/.aliases-$CLE_USER # personalized aliases
_clexe $CLE_ALIASES
_defalias

aa () {
	local ALIASBAK=$CLE_ALIASES.back
	case "$1" in
	"")	## aa         -- show aliases
		alias ;;
	s)	## aa s       -- save your set of aliases
		alias
		ask "ENTER for save, Ctrl-C to exit"
		cp $CLE_ALIASES $ALIASBAK
		alias >$CLE_ALIASES
		echo Saved to file: $CLE_ALIASES
		echo Backup in: $ALIASBAK ;;
	l)	## aa l       -- (re)load your set of aliases
		unalias -a
		. $CLE_ALIASES ;;
	ed)	## aa ed      -- edit and reload your aliases
		local TALIAS=$CLE_ALIASES.edit
		alias >$ALIASBAK
		cp $ALIASBAK $TALIAS
		vi $TALIAS
		mv $TALIAS $CLE_ALIASES
		aa l
		echo Backup in: $ALIASBAK ;;
	*)	
		echo " unimplemented: aa $1 $2"
		cle help aa
	esac
}

##
## history management
## ------------------
hh () {
	case $1 in
	"")	## hh         -- just print history
		history ;;
	s)	## hh s       -- save current history in $HISTFILE
		history -a ;;
	l)	## hh l       -- load history, use save & load to share history
		history -n ;;
	[0-9]|[0-9][0-9]|[0-9][0-9][0-9])
		## hh number  -- print last N entries
		history $1 ;;
	*)	## hh string  -- search in history
		history | grep -i $1
	esac
}

##
## SSH & SUDO wrappers:
## --------------------
## ssg [user@]hostname  -- access remote system and take CLE along
ssg () {
	pushd $CLE_DIR >/dev/null
	local CLE_RMTRC=.clerc-remote-$CLE_USER
	if [ -n "$1" ]; then
		cp $CLE_RC $CLE_RMTRC 2>/dev/null
		local SSGFILES=$CLE_RMTRC
		[ -f $CLE_CUSTOMRC ] && SSGFILES="$SSGFILES $(basename $CLE_CUSTOMRC)"
		local CLE_64=`tar chzf - $SSGFILES |base64|tr -d '\n\r '`
		`/usr/bin/which ssh` -t $* "
			${CLE_TODIR:+mkdir $CLE_TODIR; cd $CLE_TODIR;}
			echo $CLE_64|base64 --decode |tar xzf -;
			export CLE_USER=$CLE_USER;
			exec bash --rcfile $CLE_RMTRC"
	else
		cle help ssg
	fi
	unset $CLE_TODIR	# one-time use
	popd >/dev/null
}

## suu [username]       -- sudo wrapper; root is the default account
suu () {
	pushd $CLE_DIR >/dev/null
	local CLE_RMTRC=.clerc-remote-$CLE_USER
	cp $CLE_RC $CLE_RMTRC 2>/dev/null
	local SSGFILES=$CLE_RMTRC
	[ -f $CLE_CUSTOMRC ] && SSGFILES="$SSGFILES $(basename $CLE_CUSTOMRC)"
	local CLE_64=`tar chzf - $SSGFILES |base64|tr -d '\n\r '`
	sudo -i -u ${1:-root} /bin/bash  -c \
		"echo $CLE_64|base64 --decode| tar xzf -;
		 export CLE_USER=$CLE_USER;
		 exec bash --rcfile $CLE_RMTRC"
	popd >/dev/null
}

##
## CLE command & control:
## ----------------------
cle () {
	local CMD=$1; shift
	if declare -f _cle_$CMD >/dev/null; then
		# run any _cle_* function
		# those might be defined e.g. in modules .cle/mod-*
		_cle_$CMD $*
		return $?
	fi

	case "${CMD}" in
	color)	## cle color COLOR    -- set prompt color
		local CPC=$CLE_PCOLOR
		CLE_PCOLOR=$1
		_setpr || CLE_PCOLOR=$CPC ;;
	p0)	## cle p0-p3 [string] -- define prompt part 0-3
		CLE_P0="${*:-%e \A}"
		_setpr ;;
	p1)
		CLE_P1="${*:-\\u}"
		_setpr ;;
	p2)
		CLE_P2="${*:-%h}"
		_setpr ;;
	p3)
		CLE_P3="${*:-\\w %>}"
		_setpr ;;
	time)	## cle time [off]     -- toggle server time in prompt
		[ "$1" == "off" ] && CLE_P0='%e'
		[ -z "$1" ] && CLE_P0='%e \A'
		_setpr ;;
	title)	## cle title [off]    -- toggle window title
		[ "$1" == "off" ] && CLE_WT=''
		[ -z "$1" ] && _defwt 
		;;
	deploy)
		## cle deploy         -- hook CLE into user's profile
		local CLID='# Command Live Environment'
		local BRC=$HOME/.bashrc
		cp $CLE_RC $CLE_DIR/.clerc
		grep -q "$CLID" $BRC 
		if [ $? != 0 ]; then
			printb "CLE is to be integrated to your login script."
			ask " Are you sure? (y/N) "
			[ "$REPLY" != 'y' ] && return
			echo -e >>$BRC \\n$CLID
			echo -e >>$BRC "[ -f $CLE_DIR/.clerc ] && . $CLE_DIR/.clerc\n"
			printf '\n ... added following to the end of .bashrc :\n'
			tail -4 $BRC
		else
			echo "CLE is already hooked into .bashrc :"
			grep -A2 "$CLID" $BRC
		fi ;;
	update) ## cle update         -- download newest version of CLE
		if [[ $CLE_RC =~ remote ]]; then
			cat <<-EOT
			 CLE is running through remote session.
			 Update is pointless.
			EOT
			return 2
		fi
		local NCLE=$CLE_DIR/clerc-new
		curl -k $CLE_SRC/clerc >$NCLE
		printb "New CLE here: $NCLE"
		echo "current: $CLE_VERSION"
		echo "new:     `sed -n 's/^.# version: //p' $NCLE`"
		local SUM1=`md5sum $CLE_RC| cut -d' ' -f1`
		local SUM2=`md5sum $NCLE| cut -d' ' -f1`
		[[ $SUM1 == $SUM2 ]] && { echo No difference; return 1; }
		ask "Do you want to see diff? (y/N)"
		[ "$REPLY" == "y" ] && diff $CLE_RC $NCLE
		ask "Do you want to install new version? (y/N) "
		[ "$REPLY" != 'y' ] && return
		cp $CLE_RC $CLE_DIR/clerc-orig
		mv $NCLE $CLE_RC
		cle reload
		printb "New CLE has been installed, previous version saved here: $CLE_DIR/clerc-orig" ;;
	reset)	## cle reset          -- reset configuration
		rm -f $CLE_CF
		cle reload ;;
	reload) ## cle reload         -- reload CLE
		unset CLE_EXE
		CLE_VERB=1
		. $CLE_RC ;;
	mod)	## cle mod            -- cle module management
		# this is just fallback to initialize module functionality
		# downloaded mod-mod overrides this part 
		ask "Activate CLE modules? y/N "
		[ "$REPLY" != 'y' ] && return
		mkdir $CLE_DIR/.cle
		curl -k $CLE_SRC/dotcle/mod-mod >$CLE_DIR/.cle/mod-mod
		_clexe $CLE_DIR/.cle/mod-mod
		cle mod avail
		;;
	env)	## cle env            -- print CLE_* variables
		set | grep ^CLE_.*= ;;
	readme) ## cle readme         -- download and show README file
		curl -k $CLE_SRC/README.md | mdfilter |less -r ;;
	man)	## cle man            -- download and show HOWTO file
		curl -k $CLE_SRC/HOWTO.md | mdfilter |less -r ;;
	help)	## cle help [module]  -- self documenting feature
		_hlp ${1:-$CLE_RC} ;;
	"")	_clebanner
		sed -n 's/^#\*\(.*\)/\1/p' $CLE_RC
		echo ;;
	*)	echo " 'cle $CMD' not implemeted"
		echo "  check cle help"
	esac
}

# remove disturbing stuff
unset SUDO_COMMAND CLE_VERB

fi # End of login shell setup
# and that's all the magic :-)

