#
##
## mod-see: Text flow highlighter
## ------------------------------
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# (c) 2013-2017 Michael Arbet

##
## usage: see [-n] [-t nsec] [-f filename]  word1 [word2] [word3]
##
## Parses the text through regular expressions (sed) and highlights
## up to three selected words. It filters either stdin or file
## on command line. As an addition red timestamps are printed every 
## minute, they can be turned off by setting the interval to zero.
## 
see () {
	# defaults
	local SUPPRESS=""
	local TSTAMP=60
	local READER=""
	local AND=""
	local OPTIND # local scope is necessary in function
	             # this variable is used in getopts
	local RE1 RE2 RE3

	## Options:
	while getopts "ant:f:" OPT
	do
		case $OPT in
		t)	##   -t nsec  print red timestamps, default 60 seconds
			TSTAMP=$OPTARG
			;;
		f)	##   -f file  open filename instead of stdin
			READER="tail -f $OPTARG |"
			;;
		a)	##   -a       highlight when all words are found (AND operator, default is OR)
			##            note: AND will highight whole line not separated words
			AND=1
			;;
		n)	##   -n       suppress unmatched lines
			SUPPRESS=-n
			;;
		*) cle help ${BASH_SOURCE[0]}; return 1 ;;
		esac
	done
	shift $((OPTIND-1))

	# Prepare search - replacement expressions
	# currently up to three words
	case $# in
	1)	RE1="-e 's/\\($1\\)/$CT_G\\1$CT_N/'"
		[ "$SUPPRESS" ] && RE1=${REXP}p
		;;
	2)	if [ -n "$AND" ]; then
			#RE1="-e '/$1.*$2/s/\\($1\\)\\(.*\\)\\($2\\)/$CT_B\\1$CT_N\\2$CT_W\\3$CT_N/'"
			RE1="-e '/$1.*$2/s/\\(.*\\)/$CT_B\\1$CT_N/'"
			RE2="-e '/$2.*$1/s/\\(.*\\)/$CT_B\\1$CT_N/'"
		else
			RE2="-e '/$1/s/\\($1\\)/$CT_G\\1$CT_N/'"
			RE1="-e '/$2/s/\\($2\\)/$CT_Y\\1$CT_N/'"
		fi
		[ "$SUPPRESS" ] && RE2=${RE2}p
		;;
	3)	if [ -n "$AND" ]; then
			# count matching words, use '@' as marker
			RE1="-e '/$1/s/\\(.*\\)/@\\1/'"
			RE2="-e '/$2/s/\\(.*\\)/@\\1/'"
			RE3="-e '/$3/s/\\(.*\\)/@\\1/'"
			# remove marker and eventually highlight if there are 3
			RE3=$RE3" -e 's/\\(@@@\\)\\(.*\\)/$CT_B\\2$CT_N/'"
			RE3=$RE3" -e 's/\\(@\\{1,3\\}\\)\\(.*\\)/\\2/'"
		else
			RE1="-e '/$1/s/\\($1\\)/$CT_G\\1$CT_N/'"
			RE2="-e '/$2/s/\\($2\\)/$CT_Y\\1$CT_N/'"
			RE3="-e '/$3/s/\\($3\\)/$CT_C\\1$CT_N/'"
		fi
		[ "$SUPPRESS" ] && RE3=${RE3}p
		;;
	*)
		cle help ${BASH_SOURCE[0]}; return 1 ;;
	esac

	# prepare the filter to be run
	local RUN
	RUN="$READER sed $SUPPRESS $RE1 $RE2 $RE3"
	if [ $TSTAMP -gt 0 ]; then
		# loop in background prints timestamps, 
		bash -c "while true; do \
				date '+$CT_R[%d-%m-%Y %T]$CT_N'; \
				sleep $TSTAMP; \
			 done" &
		# trap ensures the loop will be terminated
		bash -c "trap 'kill $!' EXIT; $RUN"  
	else
		bash -c "$RUN"
	fi
	
	return
}
