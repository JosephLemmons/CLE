#
## mod-see: Stdout highlighter
##
## usage: see [-nt] word1 [word2] [word3]
##
##   parses the text through regular expressions (sed)
##   and highlights selected up to three selected words
##   -n        suppress unmatched lines
##   -t nsec   print red timestamps, default 60 seconds
##   -f file   open filename instead of stdin
##
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# (c) 2013-2017 Michael Arbet

see () {
	# defaults
	local SUPPRESS=""
	local TSTAMP=60
	local READER=""
	local OPTIND # local scope is necessary in function
	             # this variable is used in getopts
	local RE1 RE2 RE3

	#
	# process switches
	while getopts "nt:f:" OPT
	do
		case $OPT in
		n) SUPPRESS=-n ;;	# suppress unmatched lines
		t) TSTAMP=$OPTARG ;;	# timestamp interval
		f) READER="tail -f $OPTARG |" ;;
		*) cle help ${BASH_SOURCE[0]}; return 1 ;;
		esac
	done
	shift $((OPTIND-1))

	# Prepare search - replacement expressions
	# currently up to three words
	case $# in
	1)	RE1="-e 's/\\($1\\)/$CT_G\\1$CT_N/'"
		[ "$SUPPRESS" ] && RE1=${REXP}p
		;;
	2)	RE2="-e '/$1/s/\\($1\\)/$CT_G\\1$CT_N/'"
		RE1="-e '/$2/s/\\($2\\)/$CT_Y\\1$CT_N/'"
		[ "$SUPPRESS" ] && RE2=${RE2}p
		;;
	3)	RE3="-e '/$1/s/\\($1\\)/$CT_G\\1$CT_N/'"
		RE2="-e '/$1/s/\\($2\\)/$CT_Y\\1$CT_N/'"
		RE1="-e '/$1/s/\\($3\\)/$CT_C\\1$CT_N/'"
		[ "$SUPPRESS" ] && RE3=${RE3}p
		;;
	*)
		cle help ${BASH_SOURCE[0]}; return 1 ;;
	esac

	# prepare the filter to be run
	local RUN
	RUN="$READER sed $SUPPRESS $RE1 $RE2 $RE3"
	if [ $TSTAMP -gt 0 ]; then
		# loop in background prints timestamps, 
		bash -c "while true; do \
				date '+$CT_R[%d-%m-%Y %T]$CT_N'; \
				sleep $TSTAMP; \
			 done" &
		# trap ensures the loop will be terminated
		bash -c "trap 'kill $!' EXIT; $RUN"  
	else
		bash -c "$RUN"
	fi
	
	return
}
