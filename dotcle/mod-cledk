##
## mod-cledk: functions to assist CLE development process
## -------------------------------------------------------

# Copyright (C) 2017 by Michael Arbet
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This is another 'cle something' enhancement :-)
_cle_dk () {
	case "$1" in
	"")	## cle dk        -- development kit status
		if [ -z "$CLE_DK" ]; then
			printb "Development kit not initialized, use 'cle dk init'"
			return 1
		fi
		printb "CLE development kit here: $CLE_DK"
		pushd $CLE_DK >/dev/null
		git status
		popd >/dev/null
		echo
		ls -l $CLE_DIR/.clerc*
		;;
	run)	## cle dk run    -- restart CLE from development version
		local DEVRC=$CLE_DIR/.clerc-devel
		if [ -f $DEVRC ]; then
			printb "Restarting CLE with development resources"
			CLE_CF=$CLE_DIR/.clecf-$CLE_USER-devel
			_clexe  $CLE_CF
			CLE_P0='%e %crDEVEL'
			_setpr
			CLE_RC=$DEVRC
			CLE_VERB=1
			cle reload
		else
			echo "no $DEVRC, no fun!"
			return 1
		fi
		;;
	init)	## cle dk init   -- initialize development kit for CLE
		local P=`pwd`
		ask "Are you ready to prepare CLE development in $P?" || return 1
		printb "Cloning from git home..."
		
		# extract URL from script
		local CLE_GIT=`sed -n 's/^#\* home: *\(.*\)/\1/p' $CLE_RC`
		git clone $CLE_GIT || return $?
		echo

		# symlink .clerc-devel 
		ln -sf $P/CLE/clerc $CLE_DIR/.clerc-devel

		printb "Preparing modules to development:"
		mkdir $CLE_DIR/dotcle-backup
		cd $CLE_DIR/.cle
		local MOD
		# backup custom modules and symlink existing ones from devkit
		for MOD in mod-*; do
			if [ -f $P/CLE/dotcle/$MOD ]; then
				echo "module $MOD - symlink to $P/CLE/dotcle"
				mv -f $MOD $CLE_DIR/dotcle-backup/
				ln -s $P/CLE/dotcle/$MOD $CLE_DIR/.cle/
			else
				echo "module $MOD - copy to $CLE_DIR/dotcle-backup"
				cp $MOD $CLE_DIR/dotcle-backup/
			fi
		done
		echo
		cle dk run
		printb CLE development kit ready!
		cd $P
		;;
	help)	## cle dk help   -- print help
		cle help ${BASH_SOURCE[0]}
		;;
	*)
		echo "'cle dk $1' not implemented"; return 1;;
	esac
}

## cle ed [mod]  -- edit clerc file ev. specified module
_cle_ed () {
	local F=$CLE_DK/clerc
	[ -n "$1" ] && F=$CLE_DK/dotcle/mod-$1
	if [ ! -f $F ]; then
		echo no such file: $F
		return 1
	fi
	vi $F
}

## cle ls        -- list CLE related files
_cle_ls () {
	ls -l $HOME/.aliases* $HOME/.cle*
}

## cle exe       -- show list of all files executed during CLE startup
_cle_exe () {
	echo $CLE_EXE|tr : \\n
}

## cle func      -- list all current bash functions
_cle_func () {
	declare -f |sed -n '/.\+\s()/p'
}

## cle clean     -- clean up home folder from all cle settings
_cle_clean () {
	read -p "Cleaning CLE settings, are you sure? (y/N)  "
	[ "$REPLY" != 'y' ] && return
	unalias -a
	rm -f $CLE_ALIASES $CLE_CF ~/.clerc-local
	cle reload
}

## cle debug [on|off]  - debug mode ($CLE_DEBUG variable)
_cle_debug () {
	case "$1" in
	on) CLE_DEBUG=1 ;;
	off) CLE_DEBUG="" ;;
	esac
	echo CLE_DEBUG=$CLE_DEBUG
}

## cdc      - shortcut into $HOME/d/cle
cdc () {
	if [ -z "$CLE_DK" ]; then
		echo "No CLE development here, initialize with 'cle dk init'"
		return 1
	fi
	cd $CLE_DK
	printb CLE development kit: $PWD
	git status
}

modgen () {
	local DOTCLE=$HOME/.cle
	for M in $DOTCLE/mod-*; do
		local MM=`basename $M`
		local DESC=`grep "## $MM:" $M | sed "s/^## $MM:\s*//"`
		echo $MM: $DESC
	done

}

# Following part is runing on each CLE startup/reload

# Check if devlopment kit is initialized
# indication: .clerc-devel is symlink
if [ -L $CLE_DIR/.clerc-devel ]; then
	CLE_DK=`readlink -f $CLE_DIR/.clerc-devel`
	if [ -z "$CLE_DK" ]; then
		rm $CLE_DIR/.clerc-devel # broken symlink, 
		unset CLE_DK
	else
		CLE_DK=`dirname $CLE_DK`
	fi
else
	unset CLE_DK
fi

