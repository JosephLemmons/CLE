#!/bin/sh
#
## hlp: show script's built-in documentation
## -----------------------------------------
#* version: 2017-08-18
#* author:  Michael Arbet (marbet@redhat.com)
#* home:    https://github.com/micharbet/CLE
#* license: GNU GPL v2
#* Copyright (C) 2016-2017 by Michael Arbet
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

##
## usage: hlp [-v] [-u] [command]
##
##  The built-in documentation consist of comments introduced by double-hash
##  that can be placed anywhere inside script. Inspect this utility itself
##  to see and learn how it looks and works.
##  Running 'hlp' without arguments prints list of each script and its 
##  synopsis. Such it provides list of installed custom utilities found
##  typically in $HOME/bin directory. Issue 'hlp <scriptname>' to extract
##  complete documentation from particular script. Alternatively use options:
##
VERB=''   # verbose flag
while getopts "vu" OPT
do
	case $OPT in
	v) ##  -v     verbose mode, prints out paths and filenames useful for debugging
		VERB=y;;
	u) ##  -u     usage mode - short help
		USAGE=y;;
	esac
done
shift $((OPTIND-1))
##

HDIR=`dirname $0`
if [ $# = 0 ]; then
	# no argument on cmdline - print only synopsis of avaliable scripts
	cd $HDIR
	[ "$VERB" ] && echo directory: `pwd`
	# list available scripts
	for F in *; do
		##  Synopsis is the first duble-hashed comment.
		[ -f $F ] && awk -F: '/^##/ { printf " %-12s -%s\n",FILENAME,$2; exit }' $F
	done
else
	# first, find the file
	if [ -f $1 ]; then
		SCR=$1		# script from current directory
	elif [ -f $HDIR/$1 ]; then
		SCR=$HDIR/$1	# or from the same directory as 'hlp' itself
	else
		# ... or not found anything
		echo hlp: no such script $1 >&2
		exit 1
	fi

	[ "$VERB" ] && { echo directory: $HDIR; echo file: $HDIR/$SCR; }
	if [ "$USAGE" ]; then
		##  There can be line containing "usage:" as a short hint.
		awk -F# '/## usage:/ { print $3; exit }' $SCR
	else
		# extract complete help of given command
		# print all double-hashed comments
		awk -F# '/[\t ]## *|^## */ { print $3, $4, $5, $6 }' $SCR
	fi
fi

